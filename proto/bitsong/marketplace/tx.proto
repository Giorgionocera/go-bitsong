syntax = "proto3";
package bitsong.marketplace;

import "cosmos/base/v1beta1/coin.proto";
import "gogoproto/gogo.proto";
import "bitsong/marketplace/auction.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";

option go_package = "github.com/bitsongofficial/go-bitsong/x/marketplace/types";
option (gogoproto.goproto_getters_all) = false;

// Msg defines the Msg service
service Msg {
  rpc CreateAuction(MsgCreateAuction) returns (MsgCreateAuctionResponse);
  rpc SetAuctionAuthority(MsgSetAuctionAuthority) returns (MsgSetAuctionAuthorityResponse);
  rpc StartAuction(MsgStartAuction) returns (MsgStartAuctionResponse);
  rpc EndAuction(MsgEndAuction) returns (MsgEndAuctionResponse);
  rpc PlaceBid(MsgPlaceBid) returns (MsgPlaceBidResponse);
  rpc CancelBid(MsgCancelBid) returns (MsgCancelBidResponse);
  rpc ClaimBid(MsgClaimBid) returns (MsgClaimBidResponse);
}

message MsgCreateAuction {
  string sender = 1;
  /// NFT being used to bid
  uint64 nft_id = 2;
  /// End time is the cut-off point that the auction is forced to end by.
  google.protobuf.Timestamp end_auction_at = 3 [ (gogoproto.stdtime) = true ];
  /// Gap time is the amount of time in slots after the previous bid at which
  /// the auction ends.
  google.protobuf.Duration end_auction_gap = 4
      [ (gogoproto.stdduration) = true ];
  /// Minimum price for any bid to meet.
  uint64 price_floor = 5;
  /// Tick size
  uint64 tick_size = 6;
  /// gap_tick_size_percentage - two decimal points
  uint32 gap_tick_size_percentage = 7;

  // TODO: add when auction automatically starts or add a new message type for starting auction
  // TODO: add configuration for metadata ownership transfer or nft itself transfer or both
  // if owner of metadata and nft is different, only one can be made
  // TODO: should have type of auction for instant sell on bid
}
message MsgCreateAuctionResponse {
  uint64 id = 1;
}

message MsgSetAuctionAuthority {
  string sender = 1;
}
message MsgSetAuctionAuthorityResponse {}

message MsgStartAuction {
  string sender = 1;
  uint64 auction_id = 2;
}
message MsgStartAuctionResponse {}

message MsgEndAuction {
  string sender = 1;
  uint64 auction_id = 2;
}
message MsgEndAuctionResponse {}

message MsgPlaceBid {
  string sender = 1;
  uint64 auction_id = 2;
  cosmos.base.v1beta1.Coin amount = 3;
}
message MsgPlaceBidResponse {}

message MsgCancelBid {
  string sender = 1;
  uint64 auction_id = 2;
}

message MsgCancelBidResponse {}

message MsgClaimBid {
  string sender = 1;
  uint64 auction_id = 2;
}

message MsgClaimBidResponse {}
