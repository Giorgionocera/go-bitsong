syntax = "proto3";
package bitsong.fantoken;

import "cosmos/base/v1beta1/coin.proto";
import "gogoproto/gogo.proto";

option go_package = "github.com/bitsongofficial/go-bitsong/x/fantoken/types";
option (gogoproto.goproto_getters_all) = false;

// Msg defines the oracle Msg service
service Msg {
  // Issue defines a method for issuing a new fan token
  rpc Issue(MsgIssue) returns (MsgIssueResponse);

  // Mint defines a method for minting some fan tokens
  rpc Mint(MsgMint) returns (MsgMintResponse);

  // Burn defines a method for burning some fan tokens
  rpc Burn(MsgBurn) returns (MsgBurnResponse);

  // DisableMint defines a method for disable the mint function
  rpc DisableMint(MsgDisableMint) returns (MsgDisableMintResponse);

  // TransferAuthority defines a method for transfer the fan token authority
  rpc TransferAuthority(MsgTransferAuthority) returns (MsgTransferAuthorityResponse);
}

// MsgIssue defines a message for issuing a new fan token
message MsgIssue {

  // symbol which corresponds to the symbol of the fan token. It is a string and cannot change for the whole life of the fan token
  string symbol = 1;

  // name which corresponds to the name of the fan token. It is a string and cannot change for the whole life of the fan token
  string name = 2;

  // max_supply that represents the maximum number of possible mintable tokens. It is an integer number, expressed in micro unit 10^6
  string max_supply = 3 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.moretags) = "yaml:\"max_supply\"",
    (gogoproto.nullable) = false
  ];

  // authority which is the current owner of the fan token. It is an address and can change during the fan token lifecycle thanks to the MsgTransferAuthority
  string authority = 4;

  // TODO: should be editable?
  // URI which is the current uri of the fan token. It is a string can change during the fan token lifecycle thanks to the MsgEdit
  string uri = 5 [ (gogoproto.customname) = "URI" ];
}

// MsgIssueResponse defines the MsgIssue response type
message MsgIssueResponse {}

// MsgTransferAuthority defines a message for transferring the fan token authority
message MsgTransferAuthority {

  // denom the fan token denom
  string denom = 1;

  // src_authority, the actual owner
  string src_authority = 2 [ (gogoproto.moretags) = "yaml:\"src_authority\"" ];

  // dst_authority, the new fan token owner
  string dst_authority = 3 [ (gogoproto.moretags) = "yaml:\"dst_authority\"" ];
}

// MsgTransferAuthorityResponse defines the MsgTransferAuthority response type
message MsgTransferAuthorityResponse {}

// MsgDisableMint defines a message for disable the mint function
message MsgDisableMint {
  string denom = 1;
  string authority = 3;
}

// MsgDisableMintResponse defines the MsgDisableMint response type
message MsgDisableMintResponse {}

// MsgMint defines a message for minting a new fan token
message MsgMint {
  string recipient = 1;
  string denom = 2;
  string amount = 3 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.moretags) = "yaml:\"amount\"",
    (gogoproto.nullable) = false
  ];
  string authority = 4;
}

// MsgMintResponse defines the MsgMint response type
message MsgMintResponse {}

// MsgBurn defines a message for burning some fan tokens
message MsgBurn {
  string denom = 1;
  string amount = 2 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.moretags) = "yaml:\"amount\"",
    (gogoproto.nullable) = false
  ];
  string sender = 3;
}

// MsgBurnResponse defines the MsgBurn response type
message MsgBurnResponse {}