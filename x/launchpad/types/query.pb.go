// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: bitsong/launchpad/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryLaunchPadsRequest struct {
}

func (m *QueryLaunchPadsRequest) Reset()         { *m = QueryLaunchPadsRequest{} }
func (m *QueryLaunchPadsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLaunchPadsRequest) ProtoMessage()    {}
func (*QueryLaunchPadsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c2efc80f1cb7e5f, []int{0}
}
func (m *QueryLaunchPadsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLaunchPadsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLaunchPadsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLaunchPadsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLaunchPadsRequest.Merge(m, src)
}
func (m *QueryLaunchPadsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLaunchPadsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLaunchPadsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLaunchPadsRequest proto.InternalMessageInfo

type QueryLaunchPadsResponse struct {
	Pads []LaunchPad `protobuf:"bytes,1,rep,name=pads,proto3" json:"pads"`
}

func (m *QueryLaunchPadsResponse) Reset()         { *m = QueryLaunchPadsResponse{} }
func (m *QueryLaunchPadsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLaunchPadsResponse) ProtoMessage()    {}
func (*QueryLaunchPadsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c2efc80f1cb7e5f, []int{1}
}
func (m *QueryLaunchPadsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLaunchPadsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLaunchPadsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLaunchPadsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLaunchPadsResponse.Merge(m, src)
}
func (m *QueryLaunchPadsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLaunchPadsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLaunchPadsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLaunchPadsResponse proto.InternalMessageInfo

func (m *QueryLaunchPadsResponse) GetPads() []LaunchPad {
	if m != nil {
		return m.Pads
	}
	return nil
}

type QueryLaunchPadRequest struct {
	CollId uint64 `protobuf:"varint,1,opt,name=coll_id,json=collId,proto3" json:"coll_id,omitempty"`
}

func (m *QueryLaunchPadRequest) Reset()         { *m = QueryLaunchPadRequest{} }
func (m *QueryLaunchPadRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLaunchPadRequest) ProtoMessage()    {}
func (*QueryLaunchPadRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c2efc80f1cb7e5f, []int{2}
}
func (m *QueryLaunchPadRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLaunchPadRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLaunchPadRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLaunchPadRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLaunchPadRequest.Merge(m, src)
}
func (m *QueryLaunchPadRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLaunchPadRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLaunchPadRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLaunchPadRequest proto.InternalMessageInfo

func (m *QueryLaunchPadRequest) GetCollId() uint64 {
	if m != nil {
		return m.CollId
	}
	return 0
}

type QueryLaunchPadResponse struct {
	Pad LaunchPad `protobuf:"bytes,1,opt,name=pad,proto3" json:"pad"`
}

func (m *QueryLaunchPadResponse) Reset()         { *m = QueryLaunchPadResponse{} }
func (m *QueryLaunchPadResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLaunchPadResponse) ProtoMessage()    {}
func (*QueryLaunchPadResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c2efc80f1cb7e5f, []int{3}
}
func (m *QueryLaunchPadResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLaunchPadResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLaunchPadResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLaunchPadResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLaunchPadResponse.Merge(m, src)
}
func (m *QueryLaunchPadResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLaunchPadResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLaunchPadResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLaunchPadResponse proto.InternalMessageInfo

func (m *QueryLaunchPadResponse) GetPad() LaunchPad {
	if m != nil {
		return m.Pad
	}
	return LaunchPad{}
}

type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c2efc80f1cb7e5f, []int{4}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

type QueryParamsResponse struct {
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c2efc80f1cb7e5f, []int{5}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryMintableMetadataIdsRequest struct {
	CollId uint64 `protobuf:"varint,1,opt,name=coll_id,json=collId,proto3" json:"coll_id,omitempty"`
}

func (m *QueryMintableMetadataIdsRequest) Reset()         { *m = QueryMintableMetadataIdsRequest{} }
func (m *QueryMintableMetadataIdsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryMintableMetadataIdsRequest) ProtoMessage()    {}
func (*QueryMintableMetadataIdsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c2efc80f1cb7e5f, []int{6}
}
func (m *QueryMintableMetadataIdsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMintableMetadataIdsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMintableMetadataIdsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMintableMetadataIdsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMintableMetadataIdsRequest.Merge(m, src)
}
func (m *QueryMintableMetadataIdsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryMintableMetadataIdsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMintableMetadataIdsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMintableMetadataIdsRequest proto.InternalMessageInfo

func (m *QueryMintableMetadataIdsRequest) GetCollId() uint64 {
	if m != nil {
		return m.CollId
	}
	return 0
}

type QueryMintableMetadataIdsResponse struct {
	Info MintableMetadataIds `protobuf:"bytes,1,opt,name=info,proto3" json:"info"`
}

func (m *QueryMintableMetadataIdsResponse) Reset()         { *m = QueryMintableMetadataIdsResponse{} }
func (m *QueryMintableMetadataIdsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryMintableMetadataIdsResponse) ProtoMessage()    {}
func (*QueryMintableMetadataIdsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c2efc80f1cb7e5f, []int{7}
}
func (m *QueryMintableMetadataIdsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMintableMetadataIdsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMintableMetadataIdsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMintableMetadataIdsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMintableMetadataIdsResponse.Merge(m, src)
}
func (m *QueryMintableMetadataIdsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryMintableMetadataIdsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMintableMetadataIdsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMintableMetadataIdsResponse proto.InternalMessageInfo

func (m *QueryMintableMetadataIdsResponse) GetInfo() MintableMetadataIds {
	if m != nil {
		return m.Info
	}
	return MintableMetadataIds{}
}

func init() {
	proto.RegisterType((*QueryLaunchPadsRequest)(nil), "bitsong.launchpad.v1beta1.QueryLaunchPadsRequest")
	proto.RegisterType((*QueryLaunchPadsResponse)(nil), "bitsong.launchpad.v1beta1.QueryLaunchPadsResponse")
	proto.RegisterType((*QueryLaunchPadRequest)(nil), "bitsong.launchpad.v1beta1.QueryLaunchPadRequest")
	proto.RegisterType((*QueryLaunchPadResponse)(nil), "bitsong.launchpad.v1beta1.QueryLaunchPadResponse")
	proto.RegisterType((*QueryParamsRequest)(nil), "bitsong.launchpad.v1beta1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "bitsong.launchpad.v1beta1.QueryParamsResponse")
	proto.RegisterType((*QueryMintableMetadataIdsRequest)(nil), "bitsong.launchpad.v1beta1.QueryMintableMetadataIdsRequest")
	proto.RegisterType((*QueryMintableMetadataIdsResponse)(nil), "bitsong.launchpad.v1beta1.QueryMintableMetadataIdsResponse")
}

func init() { proto.RegisterFile("bitsong/launchpad/query.proto", fileDescriptor_7c2efc80f1cb7e5f) }

var fileDescriptor_7c2efc80f1cb7e5f = []byte{
	// 563 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x94, 0x41, 0x6b, 0x13, 0x41,
	0x14, 0xc7, 0x33, 0x36, 0x8d, 0x38, 0xde, 0xa6, 0xd5, 0xa6, 0xd1, 0x6e, 0x92, 0x45, 0x25, 0x08,
	0xdd, 0x69, 0xa2, 0x20, 0x44, 0x51, 0xe8, 0xc9, 0x82, 0x85, 0x36, 0x87, 0x82, 0x5e, 0xc2, 0xec,
	0xee, 0x64, 0x3b, 0xb0, 0xbb, 0xb3, 0xcd, 0x4c, 0xc4, 0x22, 0x5e, 0x3c, 0x7a, 0x12, 0xbc, 0x79,
	0xd2, 0x6f, 0x53, 0x3c, 0x15, 0xbc, 0x78, 0x12, 0x49, 0xfc, 0x20, 0xb2, 0xb3, 0xb3, 0x9b, 0xd6,
	0x4d, 0xb6, 0x4d, 0x6f, 0x9b, 0xf7, 0xde, 0xff, 0xfd, 0x7f, 0xef, 0xed, 0xcb, 0xc2, 0x0d, 0x9b,
	0x49, 0xc1, 0x43, 0x0f, 0xfb, 0x64, 0x14, 0x3a, 0x87, 0x11, 0x71, 0xf1, 0xd1, 0x88, 0x0e, 0x8f,
	0xad, 0x68, 0xc8, 0x25, 0x47, 0xeb, 0x3a, 0x6d, 0x65, 0x69, 0xeb, 0x6d, 0xdb, 0xa6, 0x92, 0xb4,
	0x6b, 0x86, 0xc3, 0x45, 0xc0, 0x05, 0xb6, 0x89, 0xa0, 0x58, 0x07, 0xb1, 0xc3, 0x59, 0x98, 0x48,
	0x6b, 0x0f, 0xcf, 0xe6, 0x55, 0xcf, 0xac, 0x2a, 0x22, 0x1e, 0x0b, 0x89, 0x64, 0x3c, 0xad, 0x5d,
	0xf5, 0xb8, 0xc7, 0xd5, 0x23, 0x8e, 0x9f, 0x74, 0xf4, 0xae, 0xc7, 0xb9, 0xe7, 0x53, 0x4c, 0x22,
	0x86, 0x49, 0x18, 0x72, 0xa9, 0x24, 0x42, 0x67, 0x9b, 0x79, 0xf2, 0x29, 0xa4, 0x2a, 0x31, 0xab,
	0xf0, 0xf6, 0x7e, 0x6c, 0xfc, 0x4a, 0xc5, 0xf7, 0x88, 0x2b, 0x7a, 0xf4, 0x68, 0x44, 0x85, 0x34,
	0x5f, 0xc3, 0xb5, 0x5c, 0x46, 0x44, 0x3c, 0x14, 0x14, 0x3d, 0x87, 0xe5, 0x88, 0xb8, 0xa2, 0x0a,
	0x1a, 0x4b, 0xad, 0x9b, 0x9d, 0x7b, 0xd6, 0xdc, 0x0d, 0x58, 0x99, 0x78, 0xbb, 0x7c, 0xf2, 0xbb,
	0x5e, 0xea, 0x29, 0x9d, 0xb9, 0x05, 0x6f, 0x9d, 0x6f, 0xad, 0x3d, 0xd1, 0x1a, 0xbc, 0xee, 0x70,
	0xdf, 0xef, 0x33, 0xb7, 0x0a, 0x1a, 0xa0, 0x55, 0xee, 0x55, 0xe2, 0x9f, 0x3b, 0xae, 0x79, 0xf0,
	0x3f, 0x66, 0xc6, 0xf2, 0x0c, 0x2e, 0x45, 0x24, 0x29, 0x5f, 0x0c, 0x25, 0x96, 0x99, 0xab, 0x10,
	0xa9, 0xbe, 0x7b, 0x64, 0x48, 0x82, 0x6c, 0xf4, 0x03, 0xb8, 0x72, 0x2e, 0xaa, 0xad, 0x5e, 0xc0,
	0x4a, 0xa4, 0x22, 0xda, 0xad, 0x59, 0xe0, 0x96, 0x48, 0xb5, 0x95, 0x96, 0x99, 0x5d, 0x58, 0x57,
	0x7d, 0x77, 0x59, 0x28, 0x89, 0xed, 0xd3, 0x5d, 0x2a, 0x89, 0x4b, 0x24, 0xd9, 0xc9, 0xb6, 0x3e,
	0x7f, 0x03, 0x3e, 0x6c, 0xcc, 0xd7, 0x6a, 0xc0, 0x97, 0xb0, 0xcc, 0xc2, 0x01, 0xd7, 0x78, 0x56,
	0x01, 0xde, 0x8c, 0x2e, 0xe9, 0x1b, 0x8a, 0x3b, 0x74, 0xbe, 0x2f, 0xc3, 0x65, 0x65, 0x87, 0x3e,
	0x01, 0x58, 0x49, 0x86, 0x41, 0x9b, 0x05, 0x0d, 0xf3, 0x5b, 0xac, 0x59, 0x97, 0x2d, 0x4f, 0xe8,
	0xcd, 0xe6, 0xc7, 0x9f, 0x7f, 0xbf, 0x5c, 0xbb, 0x83, 0xd6, 0x71, 0xfe, 0x6c, 0x93, 0x05, 0xa2,
	0xaf, 0x00, 0xc2, 0xe9, 0x3d, 0xa2, 0xf6, 0x45, 0x0e, 0xb9, 0xab, 0xae, 0x75, 0x16, 0x91, 0x68,
	0xb0, 0xfb, 0x0a, 0xac, 0x8e, 0x36, 0x70, 0xc1, 0xff, 0x49, 0xa0, 0x6f, 0x00, 0xde, 0xc8, 0xd4,
	0x68, 0xeb, 0xd2, 0x46, 0x29, 0x5a, 0x7b, 0x01, 0x85, 0x26, 0xb3, 0x14, 0x59, 0x0b, 0x3d, 0x28,
	0x22, 0xc3, 0xef, 0xf5, 0x45, 0x7d, 0x40, 0x3f, 0x00, 0x5c, 0x99, 0xf1, 0xea, 0x51, 0xf7, 0x22,
	0xeb, 0xf9, 0x17, 0x5b, 0x7b, 0x7a, 0x25, 0xad, 0x1e, 0xa0, 0xab, 0x06, 0x78, 0x8c, 0x3a, 0x33,
	0x06, 0x08, 0xb4, 0xae, 0x1f, 0x68, 0x61, 0x9f, 0xb9, 0x62, 0x3a, 0xcc, 0xf6, 0xfe, 0xc9, 0xd8,
	0x00, 0xa7, 0x63, 0x03, 0xfc, 0x19, 0x1b, 0xe0, 0xf3, 0xc4, 0x28, 0x9d, 0x4e, 0x8c, 0xd2, 0xaf,
	0x89, 0x51, 0x7a, 0xf3, 0xc4, 0x63, 0xf2, 0x70, 0x64, 0x5b, 0x0e, 0x0f, 0xd2, 0xbe, 0x7c, 0x30,
	0x60, 0x0e, 0x23, 0x3e, 0xf6, 0xf8, 0x66, 0x6a, 0xf5, 0xee, 0x8c, 0x99, 0x3c, 0x8e, 0xa8, 0xb0,
	0x2b, 0xea, 0xa3, 0xf8, 0xe8, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x16, 0xf0, 0x03, 0x29, 0xf3,
	0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	LaunchPads(ctx context.Context, in *QueryLaunchPadsRequest, opts ...grpc.CallOption) (*QueryLaunchPadsResponse, error)
	LaunchPad(ctx context.Context, in *QueryLaunchPadRequest, opts ...grpc.CallOption) (*QueryLaunchPadResponse, error)
	MintableMetadataIds(ctx context.Context, in *QueryMintableMetadataIdsRequest, opts ...grpc.CallOption) (*QueryMintableMetadataIdsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/bitsong.launchpad.v1beta1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LaunchPads(ctx context.Context, in *QueryLaunchPadsRequest, opts ...grpc.CallOption) (*QueryLaunchPadsResponse, error) {
	out := new(QueryLaunchPadsResponse)
	err := c.cc.Invoke(ctx, "/bitsong.launchpad.v1beta1.Query/LaunchPads", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LaunchPad(ctx context.Context, in *QueryLaunchPadRequest, opts ...grpc.CallOption) (*QueryLaunchPadResponse, error) {
	out := new(QueryLaunchPadResponse)
	err := c.cc.Invoke(ctx, "/bitsong.launchpad.v1beta1.Query/LaunchPad", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MintableMetadataIds(ctx context.Context, in *QueryMintableMetadataIdsRequest, opts ...grpc.CallOption) (*QueryMintableMetadataIdsResponse, error) {
	out := new(QueryMintableMetadataIdsResponse)
	err := c.cc.Invoke(ctx, "/bitsong.launchpad.v1beta1.Query/MintableMetadataIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	LaunchPads(context.Context, *QueryLaunchPadsRequest) (*QueryLaunchPadsResponse, error)
	LaunchPad(context.Context, *QueryLaunchPadRequest) (*QueryLaunchPadResponse, error)
	MintableMetadataIds(context.Context, *QueryMintableMetadataIdsRequest) (*QueryMintableMetadataIdsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) LaunchPads(ctx context.Context, req *QueryLaunchPadsRequest) (*QueryLaunchPadsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LaunchPads not implemented")
}
func (*UnimplementedQueryServer) LaunchPad(ctx context.Context, req *QueryLaunchPadRequest) (*QueryLaunchPadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LaunchPad not implemented")
}
func (*UnimplementedQueryServer) MintableMetadataIds(ctx context.Context, req *QueryMintableMetadataIdsRequest) (*QueryMintableMetadataIdsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MintableMetadataIds not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitsong.launchpad.v1beta1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LaunchPads_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLaunchPadsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LaunchPads(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitsong.launchpad.v1beta1.Query/LaunchPads",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LaunchPads(ctx, req.(*QueryLaunchPadsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LaunchPad_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLaunchPadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LaunchPad(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitsong.launchpad.v1beta1.Query/LaunchPad",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LaunchPad(ctx, req.(*QueryLaunchPadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MintableMetadataIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMintableMetadataIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MintableMetadataIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitsong.launchpad.v1beta1.Query/MintableMetadataIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MintableMetadataIds(ctx, req.(*QueryMintableMetadataIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bitsong.launchpad.v1beta1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "LaunchPads",
			Handler:    _Query_LaunchPads_Handler,
		},
		{
			MethodName: "LaunchPad",
			Handler:    _Query_LaunchPad_Handler,
		},
		{
			MethodName: "MintableMetadataIds",
			Handler:    _Query_MintableMetadataIds_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bitsong/launchpad/query.proto",
}

func (m *QueryLaunchPadsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLaunchPadsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLaunchPadsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryLaunchPadsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLaunchPadsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLaunchPadsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Pads) > 0 {
		for iNdEx := len(m.Pads) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Pads[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryLaunchPadRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLaunchPadRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLaunchPadRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CollId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.CollId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryLaunchPadResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLaunchPadResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLaunchPadResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Pad.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryMintableMetadataIdsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMintableMetadataIdsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMintableMetadataIdsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CollId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.CollId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryMintableMetadataIdsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMintableMetadataIdsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMintableMetadataIdsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Info.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryLaunchPadsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryLaunchPadsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Pads) > 0 {
		for _, e := range m.Pads {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryLaunchPadRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CollId != 0 {
		n += 1 + sovQuery(uint64(m.CollId))
	}
	return n
}

func (m *QueryLaunchPadResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Pad.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryMintableMetadataIdsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CollId != 0 {
		n += 1 + sovQuery(uint64(m.CollId))
	}
	return n
}

func (m *QueryMintableMetadataIdsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Info.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryLaunchPadsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLaunchPadsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLaunchPadsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLaunchPadsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLaunchPadsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLaunchPadsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pads", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pads = append(m.Pads, LaunchPad{})
			if err := m.Pads[len(m.Pads)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLaunchPadRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLaunchPadRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLaunchPadRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollId", wireType)
			}
			m.CollId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CollId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLaunchPadResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLaunchPadResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLaunchPadResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pad", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Pad.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMintableMetadataIdsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMintableMetadataIdsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMintableMetadataIdsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollId", wireType)
			}
			m.CollId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CollId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMintableMetadataIdsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMintableMetadataIdsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMintableMetadataIdsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
