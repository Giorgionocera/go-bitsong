// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: bitsong/launchpad/launchpad.proto

package types

import (
	fmt "fmt"
	types "github.com/bitsongofficial/go-bitsong/x/nft/types"
	types1 "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type LaunchPad struct {
	// id of the collection
	CollId uint64 `protobuf:"varint,1,opt,name=coll_id,json=collId,proto3" json:"coll_id,omitempty"`
	// mint price
	Price uint64 `protobuf:"varint,2,opt,name=price,proto3" json:"price,omitempty"`
	// wallet to receive payments
	Treasury string `protobuf:"bytes,3,opt,name=treasury,proto3" json:"treasury,omitempty"`
	// denom for the auction
	Denom string `protobuf:"bytes,4,opt,name=denom,proto3" json:"denom,omitempty"`
	// Timestamp when minting is allowed
	GoLiveDate uint64 `protobuf:"varint,5,opt,name=go_live_date,json=goLiveDate,proto3" json:"go_live_date,omitempty"`
	// mint end timestamp - not considered when set as 0
	EndTimestamp uint64 `protobuf:"varint,6,opt,name=end_timestamp,json=endTimestamp,proto3" json:"end_timestamp,omitempty"`
	// max mintable amount
	MaxMint uint64 `protobuf:"varint,7,opt,name=max_mint,json=maxMint,proto3" json:"max_mint,omitempty"`
	// minted amount
	Minted uint64 `protobuf:"varint,8,opt,name=minted,proto3" json:"minted,omitempty"`
	// owner of launchpad
	Authority string `protobuf:"bytes,9,opt,name=authority,proto3" json:"authority,omitempty"`
	// all metadata url is generated from metadata_base_url
	MetadataBaseUrl string `protobuf:"bytes,10,opt,name=metadata_base_url,json=metadataBaseUrl,proto3" json:"metadata_base_url,omitempty"`
	// mutability of the minted nfts
	Mutable bool `protobuf:"varint,11,opt,name=mutable,proto3" json:"mutable,omitempty"`
	// Royalty basis points that goes to creators in secondary sales (0-10000)
	SellerFeeBasisPoints uint32 `protobuf:"varint,12,opt,name=seller_fee_basis_points,json=sellerFeeBasisPoints,proto3" json:"seller_fee_basis_points,omitempty"`
	// Creators of metadata
	Creators []types.Creator `protobuf:"bytes,13,rep,name=creators,proto3" json:"creators"`
	// shows if ids are minted in sequence or shuffled
	Shuffle bool `protobuf:"varint,14,opt,name=shuffle,proto3" json:"shuffle,omitempty"`
}

func (m *LaunchPad) Reset()         { *m = LaunchPad{} }
func (m *LaunchPad) String() string { return proto.CompactTextString(m) }
func (*LaunchPad) ProtoMessage()    {}
func (*LaunchPad) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f4446d1da5081ec, []int{0}
}
func (m *LaunchPad) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LaunchPad) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LaunchPad.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LaunchPad) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LaunchPad.Merge(m, src)
}
func (m *LaunchPad) XXX_Size() int {
	return m.Size()
}
func (m *LaunchPad) XXX_DiscardUnknown() {
	xxx_messageInfo_LaunchPad.DiscardUnknown(m)
}

var xxx_messageInfo_LaunchPad proto.InternalMessageInfo

func (m *LaunchPad) GetCollId() uint64 {
	if m != nil {
		return m.CollId
	}
	return 0
}

func (m *LaunchPad) GetPrice() uint64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *LaunchPad) GetTreasury() string {
	if m != nil {
		return m.Treasury
	}
	return ""
}

func (m *LaunchPad) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *LaunchPad) GetGoLiveDate() uint64 {
	if m != nil {
		return m.GoLiveDate
	}
	return 0
}

func (m *LaunchPad) GetEndTimestamp() uint64 {
	if m != nil {
		return m.EndTimestamp
	}
	return 0
}

func (m *LaunchPad) GetMaxMint() uint64 {
	if m != nil {
		return m.MaxMint
	}
	return 0
}

func (m *LaunchPad) GetMinted() uint64 {
	if m != nil {
		return m.Minted
	}
	return 0
}

func (m *LaunchPad) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *LaunchPad) GetMetadataBaseUrl() string {
	if m != nil {
		return m.MetadataBaseUrl
	}
	return ""
}

func (m *LaunchPad) GetMutable() bool {
	if m != nil {
		return m.Mutable
	}
	return false
}

func (m *LaunchPad) GetSellerFeeBasisPoints() uint32 {
	if m != nil {
		return m.SellerFeeBasisPoints
	}
	return 0
}

func (m *LaunchPad) GetCreators() []types.Creator {
	if m != nil {
		return m.Creators
	}
	return nil
}

func (m *LaunchPad) GetShuffle() bool {
	if m != nil {
		return m.Shuffle
	}
	return false
}

type MintableMetadataIds struct {
	CollectionId        uint64   `protobuf:"varint,1,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	MintableMetadataIds []uint64 `protobuf:"varint,2,rep,packed,name=mintable_metadata_ids,json=mintableMetadataIds,proto3" json:"mintable_metadata_ids,omitempty"`
}

func (m *MintableMetadataIds) Reset()         { *m = MintableMetadataIds{} }
func (m *MintableMetadataIds) String() string { return proto.CompactTextString(m) }
func (*MintableMetadataIds) ProtoMessage()    {}
func (*MintableMetadataIds) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f4446d1da5081ec, []int{1}
}
func (m *MintableMetadataIds) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MintableMetadataIds) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MintableMetadataIds.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MintableMetadataIds) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MintableMetadataIds.Merge(m, src)
}
func (m *MintableMetadataIds) XXX_Size() int {
	return m.Size()
}
func (m *MintableMetadataIds) XXX_DiscardUnknown() {
	xxx_messageInfo_MintableMetadataIds.DiscardUnknown(m)
}

var xxx_messageInfo_MintableMetadataIds proto.InternalMessageInfo

func (m *MintableMetadataIds) GetCollectionId() uint64 {
	if m != nil {
		return m.CollectionId
	}
	return 0
}

func (m *MintableMetadataIds) GetMintableMetadataIds() []uint64 {
	if m != nil {
		return m.MintableMetadataIds
	}
	return nil
}

// Params defines launchpad module's parameters
type Params struct {
	LaunchpadCreationPrice types1.Coin `protobuf:"bytes,1,opt,name=launchpad_creation_price,json=launchpadCreationPrice,proto3" json:"launchpad_creation_price" yaml:"launchpad_creation_price"`
	LaunchpadMaxMint       uint64      `protobuf:"varint,2,opt,name=launchpad_max_mint,json=launchpadMaxMint,proto3" json:"launchpad_max_mint,omitempty"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f4446d1da5081ec, []int{2}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetLaunchpadCreationPrice() types1.Coin {
	if m != nil {
		return m.LaunchpadCreationPrice
	}
	return types1.Coin{}
}

func (m *Params) GetLaunchpadMaxMint() uint64 {
	if m != nil {
		return m.LaunchpadMaxMint
	}
	return 0
}

type EventCreateLaunchPad struct {
	Creator      string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	CollectionId uint64 `protobuf:"varint,2,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
}

func (m *EventCreateLaunchPad) Reset()         { *m = EventCreateLaunchPad{} }
func (m *EventCreateLaunchPad) String() string { return proto.CompactTextString(m) }
func (*EventCreateLaunchPad) ProtoMessage()    {}
func (*EventCreateLaunchPad) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f4446d1da5081ec, []int{3}
}
func (m *EventCreateLaunchPad) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventCreateLaunchPad) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventCreateLaunchPad.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventCreateLaunchPad) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCreateLaunchPad.Merge(m, src)
}
func (m *EventCreateLaunchPad) XXX_Size() int {
	return m.Size()
}
func (m *EventCreateLaunchPad) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCreateLaunchPad.DiscardUnknown(m)
}

var xxx_messageInfo_EventCreateLaunchPad proto.InternalMessageInfo

func (m *EventCreateLaunchPad) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *EventCreateLaunchPad) GetCollectionId() uint64 {
	if m != nil {
		return m.CollectionId
	}
	return 0
}

type EventUpdateLaunchPad struct {
	Creator      string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	CollectionId uint64 `protobuf:"varint,2,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
}

func (m *EventUpdateLaunchPad) Reset()         { *m = EventUpdateLaunchPad{} }
func (m *EventUpdateLaunchPad) String() string { return proto.CompactTextString(m) }
func (*EventUpdateLaunchPad) ProtoMessage()    {}
func (*EventUpdateLaunchPad) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f4446d1da5081ec, []int{4}
}
func (m *EventUpdateLaunchPad) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventUpdateLaunchPad) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventUpdateLaunchPad.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventUpdateLaunchPad) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventUpdateLaunchPad.Merge(m, src)
}
func (m *EventUpdateLaunchPad) XXX_Size() int {
	return m.Size()
}
func (m *EventUpdateLaunchPad) XXX_DiscardUnknown() {
	xxx_messageInfo_EventUpdateLaunchPad.DiscardUnknown(m)
}

var xxx_messageInfo_EventUpdateLaunchPad proto.InternalMessageInfo

func (m *EventUpdateLaunchPad) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *EventUpdateLaunchPad) GetCollectionId() uint64 {
	if m != nil {
		return m.CollectionId
	}
	return 0
}

type EventCloseLaunchPad struct {
	Creator      string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	CollectionId uint64 `protobuf:"varint,2,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
}

func (m *EventCloseLaunchPad) Reset()         { *m = EventCloseLaunchPad{} }
func (m *EventCloseLaunchPad) String() string { return proto.CompactTextString(m) }
func (*EventCloseLaunchPad) ProtoMessage()    {}
func (*EventCloseLaunchPad) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f4446d1da5081ec, []int{5}
}
func (m *EventCloseLaunchPad) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventCloseLaunchPad) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventCloseLaunchPad.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventCloseLaunchPad) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCloseLaunchPad.Merge(m, src)
}
func (m *EventCloseLaunchPad) XXX_Size() int {
	return m.Size()
}
func (m *EventCloseLaunchPad) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCloseLaunchPad.DiscardUnknown(m)
}

var xxx_messageInfo_EventCloseLaunchPad proto.InternalMessageInfo

func (m *EventCloseLaunchPad) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *EventCloseLaunchPad) GetCollectionId() uint64 {
	if m != nil {
		return m.CollectionId
	}
	return 0
}

type EventMintNFT struct {
	CollectionId uint64 `protobuf:"varint,1,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	NftId        string `protobuf:"bytes,2,opt,name=nft_id,json=nftId,proto3" json:"nft_id,omitempty"`
}

func (m *EventMintNFT) Reset()         { *m = EventMintNFT{} }
func (m *EventMintNFT) String() string { return proto.CompactTextString(m) }
func (*EventMintNFT) ProtoMessage()    {}
func (*EventMintNFT) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f4446d1da5081ec, []int{6}
}
func (m *EventMintNFT) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventMintNFT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventMintNFT.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventMintNFT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventMintNFT.Merge(m, src)
}
func (m *EventMintNFT) XXX_Size() int {
	return m.Size()
}
func (m *EventMintNFT) XXX_DiscardUnknown() {
	xxx_messageInfo_EventMintNFT.DiscardUnknown(m)
}

var xxx_messageInfo_EventMintNFT proto.InternalMessageInfo

func (m *EventMintNFT) GetCollectionId() uint64 {
	if m != nil {
		return m.CollectionId
	}
	return 0
}

func (m *EventMintNFT) GetNftId() string {
	if m != nil {
		return m.NftId
	}
	return ""
}

func init() {
	proto.RegisterType((*LaunchPad)(nil), "bitsong.launchpad.v1beta1.LaunchPad")
	proto.RegisterType((*MintableMetadataIds)(nil), "bitsong.launchpad.v1beta1.MintableMetadataIds")
	proto.RegisterType((*Params)(nil), "bitsong.launchpad.v1beta1.Params")
	proto.RegisterType((*EventCreateLaunchPad)(nil), "bitsong.launchpad.v1beta1.EventCreateLaunchPad")
	proto.RegisterType((*EventUpdateLaunchPad)(nil), "bitsong.launchpad.v1beta1.EventUpdateLaunchPad")
	proto.RegisterType((*EventCloseLaunchPad)(nil), "bitsong.launchpad.v1beta1.EventCloseLaunchPad")
	proto.RegisterType((*EventMintNFT)(nil), "bitsong.launchpad.v1beta1.EventMintNFT")
}

func init() { proto.RegisterFile("bitsong/launchpad/launchpad.proto", fileDescriptor_9f4446d1da5081ec) }

var fileDescriptor_9f4446d1da5081ec = []byte{
	// 732 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0x4d, 0x6b, 0x1b, 0x39,
	0x18, 0xf6, 0xc4, 0x8e, 0x3f, 0x14, 0x67, 0x3f, 0x14, 0x27, 0x51, 0x42, 0xd6, 0xf6, 0x7a, 0x0f,
	0x6b, 0x96, 0x5d, 0x0f, 0xc9, 0xb2, 0x2c, 0xe4, 0xb0, 0x07, 0x67, 0x37, 0xe0, 0x25, 0x29, 0xee,
	0x90, 0x5c, 0x7a, 0x19, 0xe4, 0x91, 0x66, 0x2c, 0x98, 0x91, 0xcc, 0x48, 0x63, 0x62, 0xe8, 0x8f,
	0xe8, 0xb1, 0xc7, 0xfc, 0x92, 0x9e, 0x73, 0xcc, 0xb1, 0x50, 0x08, 0x25, 0xb9, 0xf4, 0xdc, 0x5f,
	0x50, 0xa4, 0xf9, 0x2a, 0x0d, 0x85, 0x1e, 0x72, 0xd3, 0xfb, 0x3e, 0xef, 0xfb, 0xe8, 0xd5, 0xa3,
	0x47, 0x02, 0x3f, 0xcf, 0x98, 0x92, 0x82, 0x07, 0x76, 0x88, 0x13, 0xee, 0xcd, 0x17, 0x98, 0x94,
	0xab, 0xd1, 0x22, 0x16, 0x4a, 0xc0, 0xbd, 0xac, 0x64, 0x54, 0x02, 0xcb, 0xc3, 0x19, 0x55, 0xf8,
	0x70, 0xbf, 0x17, 0x08, 0x11, 0x84, 0xd4, 0x36, 0x85, 0xb3, 0xc4, 0xb7, 0x15, 0x8b, 0xa8, 0x54,
	0x38, 0x5a, 0xa4, 0xbd, 0xfb, 0xdd, 0x2f, 0x0b, 0x48, 0x12, 0x63, 0xc5, 0x04, 0xcf, 0xf0, 0x4e,
	0x20, 0x02, 0x61, 0x96, 0xb6, 0x5e, 0xe5, 0x5d, 0x9e, 0x90, 0x91, 0x90, 0xf6, 0x0c, 0x4b, 0x6a,
	0x67, 0x7b, 0xd9, 0x9e, 0x60, 0x79, 0xd7, 0x4f, 0xf9, 0xd0, 0xdc, 0x57, 0x05, 0xce, 0x7d, 0x95,
	0xc2, 0x83, 0x77, 0x55, 0xd0, 0x3a, 0x33, 0xb3, 0x4e, 0x31, 0x81, 0xbb, 0xa0, 0xe1, 0x89, 0x30,
	0x74, 0x19, 0x41, 0x56, 0xdf, 0x1a, 0xd6, 0x9c, 0xba, 0x0e, 0x27, 0x04, 0x76, 0xc0, 0xfa, 0x22,
	0x66, 0x1e, 0x45, 0x6b, 0x26, 0x9d, 0x06, 0x70, 0x1f, 0x34, 0x55, 0x4c, 0xb1, 0x4c, 0xe2, 0x15,
	0xaa, 0xf6, 0xad, 0x61, 0xcb, 0x29, 0x62, 0xdd, 0x41, 0x28, 0x17, 0x11, 0xaa, 0x19, 0x20, 0x0d,
	0x60, 0x1f, 0xb4, 0x03, 0xe1, 0x86, 0x6c, 0x49, 0x5d, 0x82, 0x15, 0x45, 0xeb, 0x86, 0x0e, 0x04,
	0xe2, 0x8c, 0x2d, 0xe9, 0xbf, 0x58, 0x51, 0xf8, 0x0b, 0xd8, 0xa4, 0x9c, 0xb8, 0x85, 0x38, 0xa8,
	0x6e, 0x4a, 0xda, 0x94, 0x93, 0x8b, 0x3c, 0x07, 0xf7, 0x40, 0x33, 0xc2, 0x57, 0x6e, 0xc4, 0xb8,
	0x42, 0x0d, 0x83, 0x37, 0x22, 0x7c, 0x75, 0xce, 0xb8, 0x82, 0x3b, 0xa0, 0xae, 0xd3, 0x94, 0xa0,
	0x66, 0x7a, 0x82, 0x34, 0x82, 0x07, 0xa0, 0x85, 0x13, 0x35, 0x17, 0x31, 0x53, 0x2b, 0xd4, 0x32,
	0x33, 0x95, 0x09, 0xf8, 0x1b, 0xf8, 0x31, 0xa2, 0x0a, 0x13, 0xac, 0xb0, 0xab, 0x95, 0x74, 0x93,
	0x38, 0x44, 0xc0, 0x54, 0x7d, 0x9f, 0x03, 0x63, 0x2c, 0xe9, 0x65, 0x1c, 0x42, 0x04, 0x1a, 0x51,
	0xa2, 0xf0, 0x2c, 0xa4, 0x68, 0xa3, 0x6f, 0x0d, 0x9b, 0x4e, 0x1e, 0xc2, 0xbf, 0xc0, 0xae, 0xa4,
	0x61, 0x48, 0x63, 0xd7, 0xa7, 0x54, 0xf3, 0x30, 0xe9, 0x2e, 0x04, 0xe3, 0x4a, 0xa2, 0x76, 0xdf,
	0x1a, 0x6e, 0x3a, 0x9d, 0x14, 0x3e, 0xa5, 0x74, 0xac, 0xc1, 0xa9, 0xc1, 0xe0, 0x3f, 0xa0, 0xe9,
	0xc5, 0x14, 0x2b, 0x11, 0x4b, 0xb4, 0xd9, 0xaf, 0x0e, 0x37, 0x8e, 0x0e, 0x46, 0xb9, 0x8f, 0xf4,
	0x4d, 0x65, 0xb7, 0x36, 0x3a, 0x49, 0x8b, 0xc6, 0xb5, 0x9b, 0xbb, 0x5e, 0xc5, 0x29, 0x7a, 0xf4,
	0x40, 0x72, 0x9e, 0xf8, 0x7e, 0x48, 0xd1, 0x77, 0xe9, 0x40, 0x59, 0x38, 0xe0, 0x60, 0x4b, 0x8b,
	0xa2, 0x87, 0x3b, 0xcf, 0x4e, 0x31, 0x21, 0x52, 0x6b, 0xac, 0xef, 0x95, 0x7a, 0xda, 0x5d, 0xe5,
	0x65, 0xb7, 0xcb, 0xe4, 0x84, 0xc0, 0x23, 0xb0, 0x1d, 0x65, 0xbd, 0x6e, 0xa1, 0x0d, 0x23, 0x12,
	0xad, 0xf5, 0xab, 0xc3, 0x9a, 0xb3, 0x15, 0x3d, 0x26, 0x1e, 0xbc, 0xb1, 0x40, 0x7d, 0x8a, 0x63,
	0x1c, 0x49, 0xf8, 0x12, 0xa0, 0xe2, 0x0d, 0xb8, 0x66, 0x54, 0xbd, 0x57, 0x6a, 0x22, 0xbd, 0xdd,
	0xc6, 0xd1, 0xde, 0x28, 0xb5, 0xee, 0x48, 0x0b, 0x5e, 0x1e, 0x52, 0x30, 0x3e, 0xfe, 0x55, 0x9f,
	0xf0, 0xe3, 0x5d, 0xaf, 0xb7, 0xc2, 0x51, 0x78, 0x3c, 0xf8, 0x1a, 0xd1, 0xc0, 0xd9, 0x29, 0xa0,
	0x93, 0x0c, 0x99, 0x1a, 0x67, 0xfe, 0x0e, 0x60, 0xd9, 0x54, 0x58, 0x25, 0x35, 0xef, 0x0f, 0x05,
	0x72, 0x9e, 0x7a, 0xe6, 0xb8, 0xf9, 0xfa, 0xba, 0x57, 0xf9, 0x70, 0xdd, 0xb3, 0x06, 0x97, 0xa0,
	0xf3, 0xdf, 0x92, 0x72, 0x65, 0xd8, 0x68, 0xf9, 0x30, 0x10, 0x68, 0x64, 0x72, 0x9b, 0xe1, 0x5b,
	0x4e, 0x1e, 0x3e, 0xd6, 0x72, 0xed, 0xb1, 0x96, 0x05, 0xed, 0xe5, 0x82, 0x3c, 0x25, 0xed, 0x05,
	0xd8, 0x4a, 0xa7, 0x0d, 0x85, 0x7c, 0x3a, 0xd6, 0xff, 0x41, 0xdb, 0xb0, 0x6a, 0x69, 0x9e, 0x9d,
	0x5e, 0x7c, 0x9b, 0x5b, 0xb6, 0x41, 0x9d, 0xfb, 0x2a, 0xa7, 0x6c, 0x39, 0xeb, 0xdc, 0x57, 0x13,
	0x32, 0x7e, 0x7e, 0x73, 0xdf, 0xb5, 0x6e, 0xef, 0xbb, 0xd6, 0xfb, 0xfb, 0xae, 0xf5, 0xea, 0xa1,
	0x5b, 0xb9, 0x7d, 0xe8, 0x56, 0xde, 0x3e, 0x74, 0x2b, 0x2f, 0xfe, 0x0e, 0x98, 0x9a, 0x27, 0xb3,
	0x91, 0x27, 0x22, 0x3b, 0x33, 0xbb, 0xf0, 0x7d, 0xe6, 0x31, 0x1c, 0xda, 0x81, 0xf8, 0x23, 0xff,
	0xb5, 0xae, 0x3e, 0xfb, 0x6c, 0xd5, 0x6a, 0x41, 0xe5, 0xac, 0x6e, 0x3e, 0xae, 0x3f, 0x3f, 0x05,
	0x00, 0x00, 0xff, 0xff, 0x48, 0x90, 0x42, 0x02, 0x8e, 0x05, 0x00, 0x00,
}

func (this *Params) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Params)
	if !ok {
		that2, ok := that.(Params)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LaunchpadCreationPrice.Equal(&that1.LaunchpadCreationPrice) {
		return false
	}
	if this.LaunchpadMaxMint != that1.LaunchpadMaxMint {
		return false
	}
	return true
}
func (m *LaunchPad) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LaunchPad) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LaunchPad) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Shuffle {
		i--
		if m.Shuffle {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x70
	}
	if len(m.Creators) > 0 {
		for iNdEx := len(m.Creators) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Creators[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLaunchpad(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x6a
		}
	}
	if m.SellerFeeBasisPoints != 0 {
		i = encodeVarintLaunchpad(dAtA, i, uint64(m.SellerFeeBasisPoints))
		i--
		dAtA[i] = 0x60
	}
	if m.Mutable {
		i--
		if m.Mutable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if len(m.MetadataBaseUrl) > 0 {
		i -= len(m.MetadataBaseUrl)
		copy(dAtA[i:], m.MetadataBaseUrl)
		i = encodeVarintLaunchpad(dAtA, i, uint64(len(m.MetadataBaseUrl)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintLaunchpad(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0x4a
	}
	if m.Minted != 0 {
		i = encodeVarintLaunchpad(dAtA, i, uint64(m.Minted))
		i--
		dAtA[i] = 0x40
	}
	if m.MaxMint != 0 {
		i = encodeVarintLaunchpad(dAtA, i, uint64(m.MaxMint))
		i--
		dAtA[i] = 0x38
	}
	if m.EndTimestamp != 0 {
		i = encodeVarintLaunchpad(dAtA, i, uint64(m.EndTimestamp))
		i--
		dAtA[i] = 0x30
	}
	if m.GoLiveDate != 0 {
		i = encodeVarintLaunchpad(dAtA, i, uint64(m.GoLiveDate))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintLaunchpad(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Treasury) > 0 {
		i -= len(m.Treasury)
		copy(dAtA[i:], m.Treasury)
		i = encodeVarintLaunchpad(dAtA, i, uint64(len(m.Treasury)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Price != 0 {
		i = encodeVarintLaunchpad(dAtA, i, uint64(m.Price))
		i--
		dAtA[i] = 0x10
	}
	if m.CollId != 0 {
		i = encodeVarintLaunchpad(dAtA, i, uint64(m.CollId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MintableMetadataIds) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MintableMetadataIds) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MintableMetadataIds) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MintableMetadataIds) > 0 {
		dAtA2 := make([]byte, len(m.MintableMetadataIds)*10)
		var j1 int
		for _, num := range m.MintableMetadataIds {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintLaunchpad(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x12
	}
	if m.CollectionId != 0 {
		i = encodeVarintLaunchpad(dAtA, i, uint64(m.CollectionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LaunchpadMaxMint != 0 {
		i = encodeVarintLaunchpad(dAtA, i, uint64(m.LaunchpadMaxMint))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.LaunchpadCreationPrice.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLaunchpad(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *EventCreateLaunchPad) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCreateLaunchPad) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventCreateLaunchPad) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CollectionId != 0 {
		i = encodeVarintLaunchpad(dAtA, i, uint64(m.CollectionId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintLaunchpad(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventUpdateLaunchPad) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventUpdateLaunchPad) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventUpdateLaunchPad) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CollectionId != 0 {
		i = encodeVarintLaunchpad(dAtA, i, uint64(m.CollectionId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintLaunchpad(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventCloseLaunchPad) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCloseLaunchPad) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventCloseLaunchPad) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CollectionId != 0 {
		i = encodeVarintLaunchpad(dAtA, i, uint64(m.CollectionId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintLaunchpad(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventMintNFT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventMintNFT) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventMintNFT) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NftId) > 0 {
		i -= len(m.NftId)
		copy(dAtA[i:], m.NftId)
		i = encodeVarintLaunchpad(dAtA, i, uint64(len(m.NftId)))
		i--
		dAtA[i] = 0x12
	}
	if m.CollectionId != 0 {
		i = encodeVarintLaunchpad(dAtA, i, uint64(m.CollectionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintLaunchpad(dAtA []byte, offset int, v uint64) int {
	offset -= sovLaunchpad(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LaunchPad) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CollId != 0 {
		n += 1 + sovLaunchpad(uint64(m.CollId))
	}
	if m.Price != 0 {
		n += 1 + sovLaunchpad(uint64(m.Price))
	}
	l = len(m.Treasury)
	if l > 0 {
		n += 1 + l + sovLaunchpad(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovLaunchpad(uint64(l))
	}
	if m.GoLiveDate != 0 {
		n += 1 + sovLaunchpad(uint64(m.GoLiveDate))
	}
	if m.EndTimestamp != 0 {
		n += 1 + sovLaunchpad(uint64(m.EndTimestamp))
	}
	if m.MaxMint != 0 {
		n += 1 + sovLaunchpad(uint64(m.MaxMint))
	}
	if m.Minted != 0 {
		n += 1 + sovLaunchpad(uint64(m.Minted))
	}
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovLaunchpad(uint64(l))
	}
	l = len(m.MetadataBaseUrl)
	if l > 0 {
		n += 1 + l + sovLaunchpad(uint64(l))
	}
	if m.Mutable {
		n += 2
	}
	if m.SellerFeeBasisPoints != 0 {
		n += 1 + sovLaunchpad(uint64(m.SellerFeeBasisPoints))
	}
	if len(m.Creators) > 0 {
		for _, e := range m.Creators {
			l = e.Size()
			n += 1 + l + sovLaunchpad(uint64(l))
		}
	}
	if m.Shuffle {
		n += 2
	}
	return n
}

func (m *MintableMetadataIds) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CollectionId != 0 {
		n += 1 + sovLaunchpad(uint64(m.CollectionId))
	}
	if len(m.MintableMetadataIds) > 0 {
		l = 0
		for _, e := range m.MintableMetadataIds {
			l += sovLaunchpad(uint64(e))
		}
		n += 1 + sovLaunchpad(uint64(l)) + l
	}
	return n
}

func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.LaunchpadCreationPrice.Size()
	n += 1 + l + sovLaunchpad(uint64(l))
	if m.LaunchpadMaxMint != 0 {
		n += 1 + sovLaunchpad(uint64(m.LaunchpadMaxMint))
	}
	return n
}

func (m *EventCreateLaunchPad) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovLaunchpad(uint64(l))
	}
	if m.CollectionId != 0 {
		n += 1 + sovLaunchpad(uint64(m.CollectionId))
	}
	return n
}

func (m *EventUpdateLaunchPad) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovLaunchpad(uint64(l))
	}
	if m.CollectionId != 0 {
		n += 1 + sovLaunchpad(uint64(m.CollectionId))
	}
	return n
}

func (m *EventCloseLaunchPad) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovLaunchpad(uint64(l))
	}
	if m.CollectionId != 0 {
		n += 1 + sovLaunchpad(uint64(m.CollectionId))
	}
	return n
}

func (m *EventMintNFT) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CollectionId != 0 {
		n += 1 + sovLaunchpad(uint64(m.CollectionId))
	}
	l = len(m.NftId)
	if l > 0 {
		n += 1 + l + sovLaunchpad(uint64(l))
	}
	return n
}

func sovLaunchpad(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLaunchpad(x uint64) (n int) {
	return sovLaunchpad(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LaunchPad) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLaunchpad
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LaunchPad: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LaunchPad: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollId", wireType)
			}
			m.CollId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLaunchpad
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CollId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			m.Price = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLaunchpad
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Price |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Treasury", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLaunchpad
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLaunchpad
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLaunchpad
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Treasury = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLaunchpad
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLaunchpad
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLaunchpad
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoLiveDate", wireType)
			}
			m.GoLiveDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLaunchpad
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GoLiveDate |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTimestamp", wireType)
			}
			m.EndTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLaunchpad
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTimestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxMint", wireType)
			}
			m.MaxMint = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLaunchpad
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxMint |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Minted", wireType)
			}
			m.Minted = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLaunchpad
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Minted |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLaunchpad
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLaunchpad
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLaunchpad
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetadataBaseUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLaunchpad
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLaunchpad
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLaunchpad
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MetadataBaseUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mutable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLaunchpad
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Mutable = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellerFeeBasisPoints", wireType)
			}
			m.SellerFeeBasisPoints = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLaunchpad
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SellerFeeBasisPoints |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creators", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLaunchpad
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLaunchpad
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLaunchpad
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creators = append(m.Creators, types.Creator{})
			if err := m.Creators[len(m.Creators)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shuffle", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLaunchpad
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Shuffle = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipLaunchpad(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLaunchpad
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MintableMetadataIds) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLaunchpad
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MintableMetadataIds: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MintableMetadataIds: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionId", wireType)
			}
			m.CollectionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLaunchpad
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CollectionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLaunchpad
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.MintableMetadataIds = append(m.MintableMetadataIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLaunchpad
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLaunchpad
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthLaunchpad
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.MintableMetadataIds) == 0 {
					m.MintableMetadataIds = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLaunchpad
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.MintableMetadataIds = append(m.MintableMetadataIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field MintableMetadataIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLaunchpad(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLaunchpad
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLaunchpad
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LaunchpadCreationPrice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLaunchpad
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLaunchpad
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLaunchpad
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LaunchpadCreationPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LaunchpadMaxMint", wireType)
			}
			m.LaunchpadMaxMint = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLaunchpad
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LaunchpadMaxMint |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLaunchpad(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLaunchpad
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventCreateLaunchPad) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLaunchpad
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCreateLaunchPad: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCreateLaunchPad: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLaunchpad
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLaunchpad
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLaunchpad
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionId", wireType)
			}
			m.CollectionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLaunchpad
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CollectionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLaunchpad(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLaunchpad
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventUpdateLaunchPad) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLaunchpad
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventUpdateLaunchPad: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventUpdateLaunchPad: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLaunchpad
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLaunchpad
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLaunchpad
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionId", wireType)
			}
			m.CollectionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLaunchpad
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CollectionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLaunchpad(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLaunchpad
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventCloseLaunchPad) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLaunchpad
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCloseLaunchPad: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCloseLaunchPad: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLaunchpad
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLaunchpad
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLaunchpad
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionId", wireType)
			}
			m.CollectionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLaunchpad
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CollectionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLaunchpad(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLaunchpad
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventMintNFT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLaunchpad
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventMintNFT: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventMintNFT: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionId", wireType)
			}
			m.CollectionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLaunchpad
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CollectionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLaunchpad
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLaunchpad
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLaunchpad
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLaunchpad(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLaunchpad
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLaunchpad(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLaunchpad
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLaunchpad
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLaunchpad
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLaunchpad
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLaunchpad
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLaunchpad
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLaunchpad        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLaunchpad          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLaunchpad = fmt.Errorf("proto: unexpected end of group")
)
