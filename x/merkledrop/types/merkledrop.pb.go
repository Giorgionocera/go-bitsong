// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: bitsong/merkledrop/v1beta1/merkledrop.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Merkledrop struct {
	Id          uint64                                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	MerkleRoot  string                                 `protobuf:"bytes,2,opt,name=merkle_root,json=merkleRoot,proto3" json:"merkle_root,omitempty" yaml:"merkle_root"`
	TotalAmount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=total_amount,json=totalAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"total_amount" yaml:"total_amount"`
	Owner       string                                 `protobuf:"bytes,4,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (m *Merkledrop) Reset()      { *m = Merkledrop{} }
func (*Merkledrop) ProtoMessage() {}
func (*Merkledrop) Descriptor() ([]byte, []int) {
	return fileDescriptor_21aba39fc2313837, []int{0}
}
func (m *Merkledrop) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Merkledrop) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Merkledrop.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Merkledrop) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Merkledrop.Merge(m, src)
}
func (m *Merkledrop) XXX_Size() int {
	return m.Size()
}
func (m *Merkledrop) XXX_DiscardUnknown() {
	xxx_messageInfo_Merkledrop.DiscardUnknown(m)
}

var xxx_messageInfo_Merkledrop proto.InternalMessageInfo

type EventMerkledropCreate struct {
	Owner        string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	MerkledropId uint64 `protobuf:"varint,2,opt,name=merkledrop_id,json=merkledropId,proto3" json:"merkledrop_id,omitempty"`
}

func (m *EventMerkledropCreate) Reset()         { *m = EventMerkledropCreate{} }
func (m *EventMerkledropCreate) String() string { return proto.CompactTextString(m) }
func (*EventMerkledropCreate) ProtoMessage()    {}
func (*EventMerkledropCreate) Descriptor() ([]byte, []int) {
	return fileDescriptor_21aba39fc2313837, []int{1}
}
func (m *EventMerkledropCreate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventMerkledropCreate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventMerkledropCreate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventMerkledropCreate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventMerkledropCreate.Merge(m, src)
}
func (m *EventMerkledropCreate) XXX_Size() int {
	return m.Size()
}
func (m *EventMerkledropCreate) XXX_DiscardUnknown() {
	xxx_messageInfo_EventMerkledropCreate.DiscardUnknown(m)
}

var xxx_messageInfo_EventMerkledropCreate proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Merkledrop)(nil), "bitsong.merkledrop.v1beta1.Merkledrop")
	proto.RegisterType((*EventMerkledropCreate)(nil), "bitsong.merkledrop.v1beta1.EventMerkledropCreate")
}

func init() {
	proto.RegisterFile("bitsong/merkledrop/v1beta1/merkledrop.proto", fileDescriptor_21aba39fc2313837)
}

var fileDescriptor_21aba39fc2313837 = []byte{
	// 353 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x51, 0xc1, 0x4e, 0xea, 0x40,
	0x14, 0xed, 0xf0, 0x78, 0x2f, 0xcf, 0x01, 0x5d, 0x54, 0x34, 0x0d, 0x8b, 0x96, 0xd4, 0xc4, 0x90,
	0x18, 0xda, 0x10, 0x17, 0x1a, 0x76, 0x62, 0x58, 0xb0, 0x70, 0x33, 0x0b, 0x17, 0x6e, 0x48, 0x4b,
	0x87, 0x32, 0xa1, 0xed, 0x25, 0xed, 0x80, 0xf2, 0x07, 0x2e, 0x5d, 0xba, 0xe4, 0x73, 0x58, 0xb2,
	0x34, 0x2e, 0xaa, 0xc2, 0x1f, 0xf0, 0x05, 0x86, 0x69, 0xb5, 0xb3, 0x9a, 0x39, 0xf7, 0x9e, 0x73,
	0x6f, 0xce, 0x3d, 0xf8, 0xc2, 0x65, 0x3c, 0x81, 0xc8, 0xb7, 0x43, 0x1a, 0x4f, 0x02, 0xea, 0xc5,
	0x30, 0xb5, 0xe7, 0x6d, 0x97, 0x72, 0xa7, 0x2d, 0x95, 0xac, 0x69, 0x0c, 0x1c, 0xd4, 0x7a, 0x4e,
	0xb6, 0xa4, 0x4e, 0x4e, 0xae, 0xd7, 0x7c, 0xf0, 0x41, 0xd0, 0xec, 0xfd, 0x2f, 0x53, 0x98, 0x1f,
	0x08, 0xe3, 0xbb, 0x5f, 0xb2, 0x7a, 0x84, 0x4b, 0xcc, 0xd3, 0x50, 0x03, 0x35, 0xcb, 0xa4, 0xc4,
	0x3c, 0xf5, 0x0a, 0x57, 0xb2, 0x51, 0x83, 0x18, 0x80, 0x6b, 0xa5, 0x06, 0x6a, 0x1e, 0x74, 0x4f,
	0x77, 0xa9, 0xa1, 0x2e, 0x9c, 0x30, 0xe8, 0x98, 0x52, 0xd3, 0x24, 0x38, 0x43, 0x04, 0x80, 0xab,
	0x63, 0x5c, 0xe5, 0xc0, 0x9d, 0x60, 0xe0, 0x84, 0x30, 0x8b, 0xb8, 0xf6, 0x47, 0x28, 0x7b, 0xab,
	0xd4, 0x50, 0xde, 0x53, 0xe3, 0xdc, 0x67, 0x7c, 0x3c, 0x73, 0xad, 0x21, 0x84, 0xf6, 0x10, 0x92,
	0x10, 0x92, 0xfc, 0x69, 0x25, 0xde, 0xc4, 0xe6, 0x8b, 0x29, 0x4d, 0xac, 0x7e, 0xc4, 0x77, 0xa9,
	0x71, 0x9c, 0xed, 0x91, 0x67, 0x99, 0xa4, 0x22, 0xe0, 0x8d, 0x40, 0x6a, 0x0d, 0xff, 0x85, 0xc7,
	0x88, 0xc6, 0x5a, 0x79, 0xbf, 0x82, 0x64, 0xa0, 0xf3, 0xff, 0x79, 0x69, 0x28, 0xaf, 0x4b, 0x43,
	0x31, 0x09, 0x3e, 0xe9, 0xcd, 0x69, 0xc4, 0x0b, 0x97, 0xb7, 0x31, 0x75, 0x38, 0x2d, 0x84, 0x48,
	0x12, 0xaa, 0x67, 0xf8, 0xb0, 0x38, 0xde, 0x80, 0x79, 0xc2, 0x73, 0x99, 0x54, 0x8b, 0x62, 0xdf,
	0xeb, 0xde, 0xaf, 0xbe, 0x74, 0x65, 0xb5, 0xd1, 0xd1, 0x7a, 0xa3, 0xa3, 0xcf, 0x8d, 0x8e, 0x5e,
	0xb6, 0xba, 0xb2, 0xde, 0xea, 0xca, 0xdb, 0x56, 0x57, 0x1e, 0xae, 0x25, 0x77, 0x79, 0x20, 0x30,
	0x1a, 0xb1, 0x21, 0x73, 0x02, 0xdb, 0x87, 0xd6, 0x4f, 0xa0, 0x4f, 0x72, 0xa4, 0xc2, 0xb3, 0xfb,
	0x4f, 0x84, 0x72, 0xf9, 0x1d, 0x00, 0x00, 0xff, 0xff, 0xb0, 0xa1, 0x64, 0xc1, 0xf5, 0x01, 0x00,
	0x00,
}

func (m *Merkledrop) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Merkledrop) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Merkledrop) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintMerkledrop(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x22
	}
	{
		size := m.TotalAmount.Size()
		i -= size
		if _, err := m.TotalAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMerkledrop(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.MerkleRoot) > 0 {
		i -= len(m.MerkleRoot)
		copy(dAtA[i:], m.MerkleRoot)
		i = encodeVarintMerkledrop(dAtA, i, uint64(len(m.MerkleRoot)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintMerkledrop(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventMerkledropCreate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventMerkledropCreate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventMerkledropCreate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MerkledropId != 0 {
		i = encodeVarintMerkledrop(dAtA, i, uint64(m.MerkledropId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintMerkledrop(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMerkledrop(dAtA []byte, offset int, v uint64) int {
	offset -= sovMerkledrop(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Merkledrop) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMerkledrop(uint64(m.Id))
	}
	l = len(m.MerkleRoot)
	if l > 0 {
		n += 1 + l + sovMerkledrop(uint64(l))
	}
	l = m.TotalAmount.Size()
	n += 1 + l + sovMerkledrop(uint64(l))
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovMerkledrop(uint64(l))
	}
	return n
}

func (m *EventMerkledropCreate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovMerkledrop(uint64(l))
	}
	if m.MerkledropId != 0 {
		n += 1 + sovMerkledrop(uint64(m.MerkledropId))
	}
	return n
}

func sovMerkledrop(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMerkledrop(x uint64) (n int) {
	return sovMerkledrop(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Merkledrop) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMerkledrop
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Merkledrop: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Merkledrop: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerkledrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MerkleRoot", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerkledrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMerkledrop
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMerkledrop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MerkleRoot = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerkledrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMerkledrop
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMerkledrop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerkledrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMerkledrop
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMerkledrop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMerkledrop(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMerkledrop
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventMerkledropCreate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMerkledrop
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventMerkledropCreate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventMerkledropCreate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerkledrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMerkledrop
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMerkledrop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MerkledropId", wireType)
			}
			m.MerkledropId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerkledrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MerkledropId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMerkledrop(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMerkledrop
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMerkledrop(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMerkledrop
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMerkledrop
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMerkledrop
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMerkledrop
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMerkledrop
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMerkledrop
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMerkledrop        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMerkledrop          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMerkledrop = fmt.Errorf("proto: unexpected end of group")
)
