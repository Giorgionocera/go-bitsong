// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: bitsong/candymachine/candymachine.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EndSettingType int32

const (
	EndSettingType_Time EndSettingType = 0
	EndSettingType_Mint EndSettingType = 1
)

var EndSettingType_name = map[int32]string{
	0: "BY_TIME",
	1: "BY_MINT",
}

var EndSettingType_value = map[string]int32{
	"BY_TIME": 0,
	"BY_MINT": 1,
}

func (x EndSettingType) String() string {
	return proto.EnumName(EndSettingType_name, int32(x))
}

func (EndSettingType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_66f56f58d48d7759, []int{0}
}

type CandyMachine struct {
	// id of the collection
	CollId uint64 `protobuf:"varint,1,opt,name=coll_id,json=collId,proto3" json:"coll_id,omitempty"`
	// mint price
	Price uint64 `protobuf:"varint,2,opt,name=price,proto3" json:"price,omitempty"`
	// wallet to receive payments
	Treasury string `protobuf:"bytes,3,opt,name=treasury,proto3" json:"treasury,omitempty"`
	// denom for the auction
	Denom string `protobuf:"bytes,4,opt,name=denom,proto3" json:"denom,omitempty"`
	// Timestamp when minting is allowed
	GoLiveDate string `protobuf:"bytes,5,opt,name=go_live_date,json=goLiveDate,proto3" json:"go_live_date,omitempty"`
	// condition to check when candy machine ends
	EndSettings EndSettings `protobuf:"bytes,6,opt,name=end_settings,json=endSettings,proto3" json:"end_settings"`
	// all metadata url is generated from metadata_base_url
	MetadataBaseUrl string `protobuf:"bytes,7,opt,name=metadata_base_url,json=metadataBaseUrl,proto3" json:"metadata_base_url,omitempty"`
	// mutability of the minted nfts
	Mutable bool `protobuf:"varint,8,opt,name=mutable,proto3" json:"mutable,omitempty"`
	// minted amount
	Minted uint64 `protobuf:"varint,9,opt,name=minted,proto3" json:"minted,omitempty"`
	// owner of candy machine
	Authority string `protobuf:"bytes,10,opt,name=authority,proto3" json:"authority,omitempty"`
}

func (m *CandyMachine) Reset()         { *m = CandyMachine{} }
func (m *CandyMachine) String() string { return proto.CompactTextString(m) }
func (*CandyMachine) ProtoMessage()    {}
func (*CandyMachine) Descriptor() ([]byte, []int) {
	return fileDescriptor_66f56f58d48d7759, []int{0}
}
func (m *CandyMachine) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CandyMachine) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CandyMachine.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CandyMachine) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CandyMachine.Merge(m, src)
}
func (m *CandyMachine) XXX_Size() int {
	return m.Size()
}
func (m *CandyMachine) XXX_DiscardUnknown() {
	xxx_messageInfo_CandyMachine.DiscardUnknown(m)
}

var xxx_messageInfo_CandyMachine proto.InternalMessageInfo

func (m *CandyMachine) GetCollId() uint64 {
	if m != nil {
		return m.CollId
	}
	return 0
}

func (m *CandyMachine) GetPrice() uint64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *CandyMachine) GetTreasury() string {
	if m != nil {
		return m.Treasury
	}
	return ""
}

func (m *CandyMachine) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *CandyMachine) GetGoLiveDate() string {
	if m != nil {
		return m.GoLiveDate
	}
	return ""
}

func (m *CandyMachine) GetEndSettings() EndSettings {
	if m != nil {
		return m.EndSettings
	}
	return EndSettings{}
}

func (m *CandyMachine) GetMetadataBaseUrl() string {
	if m != nil {
		return m.MetadataBaseUrl
	}
	return ""
}

func (m *CandyMachine) GetMutable() bool {
	if m != nil {
		return m.Mutable
	}
	return false
}

func (m *CandyMachine) GetMinted() uint64 {
	if m != nil {
		return m.Minted
	}
	return 0
}

func (m *CandyMachine) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

type EndSettings struct {
	EndType EndSettingType `protobuf:"varint,1,opt,name=end_type,json=endType,proto3,enum=bitsong.candymachine.v1beta1.EndSettingType" json:"end_type,omitempty"`
	Value   uint64         `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *EndSettings) Reset()         { *m = EndSettings{} }
func (m *EndSettings) String() string { return proto.CompactTextString(m) }
func (*EndSettings) ProtoMessage()    {}
func (*EndSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_66f56f58d48d7759, []int{1}
}
func (m *EndSettings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EndSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EndSettings.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EndSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EndSettings.Merge(m, src)
}
func (m *EndSettings) XXX_Size() int {
	return m.Size()
}
func (m *EndSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_EndSettings.DiscardUnknown(m)
}

var xxx_messageInfo_EndSettings proto.InternalMessageInfo

func (m *EndSettings) GetEndType() EndSettingType {
	if m != nil {
		return m.EndType
	}
	return EndSettingType_Time
}

func (m *EndSettings) GetValue() uint64 {
	if m != nil {
		return m.Value
	}
	return 0
}

// Params defines candymachine module's parameters
type Params struct {
	CandymachineCreationPrice types.Coin `protobuf:"bytes,1,opt,name=candymachine_creation_price,json=candymachineCreationPrice,proto3" json:"candymachine_creation_price" yaml:"candymachine_creation_price"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_66f56f58d48d7759, []int{2}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetCandymachineCreationPrice() types.Coin {
	if m != nil {
		return m.CandymachineCreationPrice
	}
	return types.Coin{}
}

type EventCreateCandyMachine struct {
	Creator      string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	CollectionId uint64 `protobuf:"varint,2,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
}

func (m *EventCreateCandyMachine) Reset()         { *m = EventCreateCandyMachine{} }
func (m *EventCreateCandyMachine) String() string { return proto.CompactTextString(m) }
func (*EventCreateCandyMachine) ProtoMessage()    {}
func (*EventCreateCandyMachine) Descriptor() ([]byte, []int) {
	return fileDescriptor_66f56f58d48d7759, []int{3}
}
func (m *EventCreateCandyMachine) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventCreateCandyMachine) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventCreateCandyMachine.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventCreateCandyMachine) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCreateCandyMachine.Merge(m, src)
}
func (m *EventCreateCandyMachine) XXX_Size() int {
	return m.Size()
}
func (m *EventCreateCandyMachine) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCreateCandyMachine.DiscardUnknown(m)
}

var xxx_messageInfo_EventCreateCandyMachine proto.InternalMessageInfo

func (m *EventCreateCandyMachine) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *EventCreateCandyMachine) GetCollectionId() uint64 {
	if m != nil {
		return m.CollectionId
	}
	return 0
}

type EventMintNFT struct {
	CollectionId uint64 `protobuf:"varint,1,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	NftId        string `protobuf:"bytes,2,opt,name=nft_id,json=nftId,proto3" json:"nft_id,omitempty"`
}

func (m *EventMintNFT) Reset()         { *m = EventMintNFT{} }
func (m *EventMintNFT) String() string { return proto.CompactTextString(m) }
func (*EventMintNFT) ProtoMessage()    {}
func (*EventMintNFT) Descriptor() ([]byte, []int) {
	return fileDescriptor_66f56f58d48d7759, []int{4}
}
func (m *EventMintNFT) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventMintNFT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventMintNFT.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventMintNFT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventMintNFT.Merge(m, src)
}
func (m *EventMintNFT) XXX_Size() int {
	return m.Size()
}
func (m *EventMintNFT) XXX_DiscardUnknown() {
	xxx_messageInfo_EventMintNFT.DiscardUnknown(m)
}

var xxx_messageInfo_EventMintNFT proto.InternalMessageInfo

func (m *EventMintNFT) GetCollectionId() uint64 {
	if m != nil {
		return m.CollectionId
	}
	return 0
}

func (m *EventMintNFT) GetNftId() string {
	if m != nil {
		return m.NftId
	}
	return ""
}

func init() {
	proto.RegisterEnum("bitsong.candymachine.v1beta1.EndSettingType", EndSettingType_name, EndSettingType_value)
	proto.RegisterType((*CandyMachine)(nil), "bitsong.candymachine.v1beta1.CandyMachine")
	proto.RegisterType((*EndSettings)(nil), "bitsong.candymachine.v1beta1.EndSettings")
	proto.RegisterType((*Params)(nil), "bitsong.candymachine.v1beta1.Params")
	proto.RegisterType((*EventCreateCandyMachine)(nil), "bitsong.candymachine.v1beta1.EventCreateCandyMachine")
	proto.RegisterType((*EventMintNFT)(nil), "bitsong.candymachine.v1beta1.EventMintNFT")
}

func init() {
	proto.RegisterFile("bitsong/candymachine/candymachine.proto", fileDescriptor_66f56f58d48d7759)
}

var fileDescriptor_66f56f58d48d7759 = []byte{
	// 658 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0x4d, 0x6f, 0xd3, 0x4a,
	0x14, 0xcd, 0xf4, 0xa5, 0xf9, 0x98, 0xe6, 0xf5, 0xf5, 0x8d, 0x5a, 0xea, 0x86, 0xca, 0x89, 0xcc,
	0x82, 0x50, 0x81, 0xad, 0x96, 0x5d, 0x17, 0x2c, 0x52, 0x0a, 0x0a, 0x22, 0x55, 0x65, 0x82, 0x04,
	0x6c, 0xac, 0xb1, 0x67, 0xe2, 0x8e, 0x64, 0xcf, 0x44, 0xf6, 0x38, 0x22, 0x3f, 0x80, 0x0d, 0x2b,
	0x96, 0x08, 0x09, 0xa9, 0x3f, 0xa7, 0xcb, 0x2e, 0x59, 0x55, 0xd0, 0x6e, 0x58, 0xf3, 0x0b, 0xd0,
	0x8c, 0xed, 0xb6, 0xa1, 0x52, 0xc5, 0x6e, 0xce, 0x3d, 0x73, 0xee, 0xbd, 0x73, 0xee, 0xb5, 0xe1,
	0x7d, 0x9f, 0xc9, 0x54, 0xf0, 0xd0, 0x09, 0x30, 0x27, 0xb3, 0x18, 0x07, 0x47, 0x8c, 0xd3, 0x39,
	0x60, 0x4f, 0x12, 0x21, 0x05, 0xda, 0x2c, 0x2e, 0xda, 0x73, 0xdc, 0x74, 0xdb, 0xa7, 0x12, 0x6f,
	0xb7, 0x3b, 0xa1, 0x10, 0x61, 0x44, 0x1d, 0x7d, 0xd7, 0xcf, 0xc6, 0x8e, 0x64, 0x31, 0x4d, 0x25,
	0x8e, 0x27, 0xb9, 0xbc, 0x6d, 0xfe, 0x79, 0x81, 0x64, 0x09, 0x96, 0x4c, 0xf0, 0x82, 0x5f, 0x0d,
	0x45, 0x28, 0xf4, 0xd1, 0x51, 0xa7, 0x52, 0x15, 0x88, 0x34, 0x16, 0xa9, 0xe3, 0xe3, 0x94, 0x3a,
	0x45, 0x2d, 0x27, 0x10, 0xac, 0x50, 0x59, 0x3f, 0x16, 0x60, 0x6b, 0x4f, 0xf5, 0x33, 0xcc, 0xfb,
	0x41, 0xeb, 0xb0, 0x1e, 0x88, 0x28, 0xf2, 0x18, 0x31, 0x40, 0x17, 0xf4, 0xaa, 0x6e, 0x4d, 0xc1,
	0x01, 0x41, 0xab, 0x70, 0x71, 0x92, 0xb0, 0x80, 0x1a, 0x0b, 0x3a, 0x9c, 0x03, 0xd4, 0x86, 0x0d,
	0x99, 0x50, 0x9c, 0x66, 0xc9, 0xcc, 0xf8, 0xa7, 0x0b, 0x7a, 0x4d, 0xf7, 0x12, 0x2b, 0x05, 0xa1,
	0x5c, 0xc4, 0x46, 0x55, 0x13, 0x39, 0x40, 0x5d, 0xd8, 0x0a, 0x85, 0x17, 0xb1, 0x29, 0xf5, 0x08,
	0x96, 0xd4, 0x58, 0xd4, 0x24, 0x0c, 0xc5, 0x4b, 0x36, 0xa5, 0x4f, 0xb1, 0xa4, 0xc8, 0x85, 0x2d,
	0xca, 0x89, 0x97, 0x52, 0x29, 0x19, 0x0f, 0x53, 0xa3, 0xd6, 0x05, 0xbd, 0xa5, 0x9d, 0x07, 0xf6,
	0x6d, 0xfe, 0xd9, 0xfb, 0x9c, 0xbc, 0x2a, 0x04, 0xfd, 0xea, 0xc9, 0x59, 0xa7, 0xe2, 0x2e, 0xd1,
	0xab, 0x10, 0xda, 0x82, 0xff, 0xc7, 0x54, 0x62, 0x82, 0x25, 0xf6, 0x94, 0x17, 0x5e, 0x96, 0x44,
	0x46, 0x5d, 0x97, 0xfe, 0xaf, 0x24, 0xfa, 0x38, 0xa5, 0xaf, 0x93, 0x08, 0x19, 0xb0, 0x1e, 0x67,
	0x12, 0xfb, 0x11, 0x35, 0x1a, 0x5d, 0xd0, 0x6b, 0xb8, 0x25, 0x44, 0x77, 0x60, 0x2d, 0x66, 0x5c,
	0x52, 0x62, 0x34, 0x73, 0x6f, 0x72, 0x84, 0x36, 0x61, 0x13, 0x67, 0xf2, 0x48, 0x24, 0x4c, 0xce,
	0x0c, 0xa8, 0xb3, 0x5e, 0x05, 0xac, 0x08, 0x2e, 0x5d, 0xeb, 0x0e, 0x3d, 0x87, 0x0d, 0xf5, 0x3c,
	0x39, 0x9b, 0x50, 0x6d, 0xf1, 0xf2, 0xce, 0xc3, 0xbf, 0x7d, 0xda, 0x68, 0x36, 0xa1, 0x6e, 0x9d,
	0x72, 0xa2, 0x0e, 0xca, 0xdf, 0x29, 0x8e, 0xb2, 0xcb, 0x89, 0x68, 0x60, 0x7d, 0x01, 0xb0, 0x76,
	0x88, 0x13, 0x1c, 0xa7, 0xe8, 0x03, 0x80, 0x77, 0xaf, 0x67, 0xf4, 0x82, 0x84, 0xea, 0x95, 0xf1,
	0xf2, 0x49, 0x02, 0x6d, 0xec, 0x86, 0x9d, 0xef, 0x88, 0xad, 0x7c, 0xb9, 0x2c, 0xba, 0x27, 0x18,
	0xef, 0x6f, 0x29, 0x23, 0x7f, 0x9d, 0x75, 0xac, 0x19, 0x8e, 0xa3, 0x5d, 0xeb, 0x96, 0x5c, 0x96,
	0xbb, 0x71, 0x9d, 0xdd, 0x2b, 0xc8, 0x43, 0xc5, 0xed, 0x36, 0x3e, 0x1f, 0x77, 0x2a, 0x3f, 0x8f,
	0x3b, 0xc0, 0x7a, 0x03, 0xd7, 0xf7, 0xa7, 0x94, 0x4b, 0xcd, 0xd3, 0xb9, 0xc5, 0x33, 0x60, 0x5d,
	0xa7, 0x14, 0x89, 0xee, 0xab, 0xe9, 0x96, 0x10, 0xdd, 0x83, 0xff, 0xaa, 0x1d, 0xa4, 0x81, 0x2e,
	0xc7, 0x48, 0xf1, 0xde, 0xd6, 0x55, 0x70, 0x40, 0xac, 0x17, 0xb0, 0xa5, 0x33, 0x0f, 0x19, 0x97,
	0x07, 0xcf, 0x46, 0x37, 0x45, 0xe0, 0xa6, 0x08, 0xad, 0xc1, 0x1a, 0x1f, 0xcb, 0x32, 0x65, 0xd3,
	0x5d, 0xe4, 0x63, 0x39, 0x20, 0x5b, 0x4f, 0xe0, 0xf2, 0xbc, 0xe7, 0x68, 0x0d, 0xd6, 0xfb, 0x6f,
	0xbd, 0xd1, 0x60, 0xb8, 0xbf, 0x52, 0x69, 0x37, 0x3e, 0x7e, 0xed, 0x56, 0x47, 0x2c, 0x2e, 0xc3,
	0xc3, 0xc1, 0xc1, 0x68, 0x05, 0xe4, 0x61, 0x55, 0xbe, 0x3f, 0x3a, 0x39, 0x37, 0xc1, 0xe9, 0xb9,
	0x09, 0xbe, 0x9f, 0x9b, 0xe0, 0xd3, 0x85, 0x59, 0x39, 0xbd, 0x30, 0x2b, 0xdf, 0x2e, 0xcc, 0xca,
	0xbb, 0xdd, 0x90, 0xc9, 0xa3, 0xcc, 0xb7, 0x03, 0x11, 0x3b, 0xc5, 0xcc, 0xc5, 0x78, 0xcc, 0x02,
	0x86, 0x23, 0x27, 0x14, 0x8f, 0xca, 0x5f, 0xc9, 0xfb, 0xf9, 0x9f, 0x89, 0x5a, 0x95, 0xd4, 0xaf,
	0xe9, 0x2f, 0xf6, 0xf1, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd1, 0x10, 0x4b, 0x0b, 0x71, 0x04,
	0x00, 0x00,
}

func (this *Params) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Params)
	if !ok {
		that2, ok := that.(Params)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CandymachineCreationPrice.Equal(&that1.CandymachineCreationPrice) {
		return false
	}
	return true
}
func (m *CandyMachine) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CandyMachine) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CandyMachine) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintCandymachine(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0x52
	}
	if m.Minted != 0 {
		i = encodeVarintCandymachine(dAtA, i, uint64(m.Minted))
		i--
		dAtA[i] = 0x48
	}
	if m.Mutable {
		i--
		if m.Mutable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if len(m.MetadataBaseUrl) > 0 {
		i -= len(m.MetadataBaseUrl)
		copy(dAtA[i:], m.MetadataBaseUrl)
		i = encodeVarintCandymachine(dAtA, i, uint64(len(m.MetadataBaseUrl)))
		i--
		dAtA[i] = 0x3a
	}
	{
		size, err := m.EndSettings.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintCandymachine(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if len(m.GoLiveDate) > 0 {
		i -= len(m.GoLiveDate)
		copy(dAtA[i:], m.GoLiveDate)
		i = encodeVarintCandymachine(dAtA, i, uint64(len(m.GoLiveDate)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintCandymachine(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Treasury) > 0 {
		i -= len(m.Treasury)
		copy(dAtA[i:], m.Treasury)
		i = encodeVarintCandymachine(dAtA, i, uint64(len(m.Treasury)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Price != 0 {
		i = encodeVarintCandymachine(dAtA, i, uint64(m.Price))
		i--
		dAtA[i] = 0x10
	}
	if m.CollId != 0 {
		i = encodeVarintCandymachine(dAtA, i, uint64(m.CollId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EndSettings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndSettings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EndSettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != 0 {
		i = encodeVarintCandymachine(dAtA, i, uint64(m.Value))
		i--
		dAtA[i] = 0x10
	}
	if m.EndType != 0 {
		i = encodeVarintCandymachine(dAtA, i, uint64(m.EndType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.CandymachineCreationPrice.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintCandymachine(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *EventCreateCandyMachine) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCreateCandyMachine) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventCreateCandyMachine) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CollectionId != 0 {
		i = encodeVarintCandymachine(dAtA, i, uint64(m.CollectionId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintCandymachine(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventMintNFT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventMintNFT) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventMintNFT) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NftId) > 0 {
		i -= len(m.NftId)
		copy(dAtA[i:], m.NftId)
		i = encodeVarintCandymachine(dAtA, i, uint64(len(m.NftId)))
		i--
		dAtA[i] = 0x12
	}
	if m.CollectionId != 0 {
		i = encodeVarintCandymachine(dAtA, i, uint64(m.CollectionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintCandymachine(dAtA []byte, offset int, v uint64) int {
	offset -= sovCandymachine(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CandyMachine) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CollId != 0 {
		n += 1 + sovCandymachine(uint64(m.CollId))
	}
	if m.Price != 0 {
		n += 1 + sovCandymachine(uint64(m.Price))
	}
	l = len(m.Treasury)
	if l > 0 {
		n += 1 + l + sovCandymachine(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovCandymachine(uint64(l))
	}
	l = len(m.GoLiveDate)
	if l > 0 {
		n += 1 + l + sovCandymachine(uint64(l))
	}
	l = m.EndSettings.Size()
	n += 1 + l + sovCandymachine(uint64(l))
	l = len(m.MetadataBaseUrl)
	if l > 0 {
		n += 1 + l + sovCandymachine(uint64(l))
	}
	if m.Mutable {
		n += 2
	}
	if m.Minted != 0 {
		n += 1 + sovCandymachine(uint64(m.Minted))
	}
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovCandymachine(uint64(l))
	}
	return n
}

func (m *EndSettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EndType != 0 {
		n += 1 + sovCandymachine(uint64(m.EndType))
	}
	if m.Value != 0 {
		n += 1 + sovCandymachine(uint64(m.Value))
	}
	return n
}

func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CandymachineCreationPrice.Size()
	n += 1 + l + sovCandymachine(uint64(l))
	return n
}

func (m *EventCreateCandyMachine) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovCandymachine(uint64(l))
	}
	if m.CollectionId != 0 {
		n += 1 + sovCandymachine(uint64(m.CollectionId))
	}
	return n
}

func (m *EventMintNFT) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CollectionId != 0 {
		n += 1 + sovCandymachine(uint64(m.CollectionId))
	}
	l = len(m.NftId)
	if l > 0 {
		n += 1 + l + sovCandymachine(uint64(l))
	}
	return n
}

func sovCandymachine(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCandymachine(x uint64) (n int) {
	return sovCandymachine(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CandyMachine) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCandymachine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CandyMachine: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CandyMachine: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollId", wireType)
			}
			m.CollId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCandymachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CollId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			m.Price = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCandymachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Price |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Treasury", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCandymachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCandymachine
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCandymachine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Treasury = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCandymachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCandymachine
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCandymachine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoLiveDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCandymachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCandymachine
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCandymachine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GoLiveDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCandymachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCandymachine
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCandymachine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EndSettings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetadataBaseUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCandymachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCandymachine
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCandymachine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MetadataBaseUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mutable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCandymachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Mutable = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Minted", wireType)
			}
			m.Minted = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCandymachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Minted |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCandymachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCandymachine
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCandymachine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCandymachine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCandymachine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EndSettings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCandymachine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EndSettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EndSettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndType", wireType)
			}
			m.EndType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCandymachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndType |= EndSettingType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCandymachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCandymachine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCandymachine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCandymachine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CandymachineCreationPrice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCandymachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCandymachine
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCandymachine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CandymachineCreationPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCandymachine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCandymachine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventCreateCandyMachine) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCandymachine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCreateCandyMachine: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCreateCandyMachine: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCandymachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCandymachine
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCandymachine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionId", wireType)
			}
			m.CollectionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCandymachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CollectionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCandymachine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCandymachine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventMintNFT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCandymachine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventMintNFT: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventMintNFT: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionId", wireType)
			}
			m.CollectionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCandymachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CollectionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCandymachine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCandymachine
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCandymachine
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCandymachine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCandymachine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCandymachine(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCandymachine
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCandymachine
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCandymachine
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCandymachine
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCandymachine
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCandymachine
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCandymachine        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCandymachine          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCandymachine = fmt.Errorf("proto: unexpected end of group")
)
