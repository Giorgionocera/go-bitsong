// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: bitsong/candymachine/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryCandyMachinesRequest struct {
}

func (m *QueryCandyMachinesRequest) Reset()         { *m = QueryCandyMachinesRequest{} }
func (m *QueryCandyMachinesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCandyMachinesRequest) ProtoMessage()    {}
func (*QueryCandyMachinesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d71ca7aa0e1f6c00, []int{0}
}
func (m *QueryCandyMachinesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCandyMachinesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCandyMachinesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCandyMachinesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCandyMachinesRequest.Merge(m, src)
}
func (m *QueryCandyMachinesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCandyMachinesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCandyMachinesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCandyMachinesRequest proto.InternalMessageInfo

type QueryCandyMachinesResponse struct {
	Machines []CandyMachine `protobuf:"bytes,1,rep,name=machines,proto3" json:"machines"`
}

func (m *QueryCandyMachinesResponse) Reset()         { *m = QueryCandyMachinesResponse{} }
func (m *QueryCandyMachinesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCandyMachinesResponse) ProtoMessage()    {}
func (*QueryCandyMachinesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d71ca7aa0e1f6c00, []int{1}
}
func (m *QueryCandyMachinesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCandyMachinesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCandyMachinesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCandyMachinesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCandyMachinesResponse.Merge(m, src)
}
func (m *QueryCandyMachinesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCandyMachinesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCandyMachinesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCandyMachinesResponse proto.InternalMessageInfo

func (m *QueryCandyMachinesResponse) GetMachines() []CandyMachine {
	if m != nil {
		return m.Machines
	}
	return nil
}

type QueryCandyMachineRequest struct {
	CollId uint64 `protobuf:"varint,1,opt,name=coll_id,json=collId,proto3" json:"coll_id,omitempty"`
}

func (m *QueryCandyMachineRequest) Reset()         { *m = QueryCandyMachineRequest{} }
func (m *QueryCandyMachineRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCandyMachineRequest) ProtoMessage()    {}
func (*QueryCandyMachineRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d71ca7aa0e1f6c00, []int{2}
}
func (m *QueryCandyMachineRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCandyMachineRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCandyMachineRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCandyMachineRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCandyMachineRequest.Merge(m, src)
}
func (m *QueryCandyMachineRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCandyMachineRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCandyMachineRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCandyMachineRequest proto.InternalMessageInfo

func (m *QueryCandyMachineRequest) GetCollId() uint64 {
	if m != nil {
		return m.CollId
	}
	return 0
}

type QueryCandyMachineResponse struct {
	Machine CandyMachine `protobuf:"bytes,1,opt,name=machine,proto3" json:"machine"`
}

func (m *QueryCandyMachineResponse) Reset()         { *m = QueryCandyMachineResponse{} }
func (m *QueryCandyMachineResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCandyMachineResponse) ProtoMessage()    {}
func (*QueryCandyMachineResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d71ca7aa0e1f6c00, []int{3}
}
func (m *QueryCandyMachineResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCandyMachineResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCandyMachineResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCandyMachineResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCandyMachineResponse.Merge(m, src)
}
func (m *QueryCandyMachineResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCandyMachineResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCandyMachineResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCandyMachineResponse proto.InternalMessageInfo

func (m *QueryCandyMachineResponse) GetMachine() CandyMachine {
	if m != nil {
		return m.Machine
	}
	return CandyMachine{}
}

type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d71ca7aa0e1f6c00, []int{4}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

type QueryParamsResponse struct {
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d71ca7aa0e1f6c00, []int{5}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryMintableMetadataIdsRequest struct {
	CollId uint64 `protobuf:"varint,1,opt,name=coll_id,json=collId,proto3" json:"coll_id,omitempty"`
}

func (m *QueryMintableMetadataIdsRequest) Reset()         { *m = QueryMintableMetadataIdsRequest{} }
func (m *QueryMintableMetadataIdsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryMintableMetadataIdsRequest) ProtoMessage()    {}
func (*QueryMintableMetadataIdsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d71ca7aa0e1f6c00, []int{6}
}
func (m *QueryMintableMetadataIdsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMintableMetadataIdsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMintableMetadataIdsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMintableMetadataIdsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMintableMetadataIdsRequest.Merge(m, src)
}
func (m *QueryMintableMetadataIdsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryMintableMetadataIdsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMintableMetadataIdsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMintableMetadataIdsRequest proto.InternalMessageInfo

func (m *QueryMintableMetadataIdsRequest) GetCollId() uint64 {
	if m != nil {
		return m.CollId
	}
	return 0
}

type QueryMintableMetadataIdsResponse struct {
	Info MintableMetadataIds `protobuf:"bytes,1,opt,name=info,proto3" json:"info"`
}

func (m *QueryMintableMetadataIdsResponse) Reset()         { *m = QueryMintableMetadataIdsResponse{} }
func (m *QueryMintableMetadataIdsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryMintableMetadataIdsResponse) ProtoMessage()    {}
func (*QueryMintableMetadataIdsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d71ca7aa0e1f6c00, []int{7}
}
func (m *QueryMintableMetadataIdsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMintableMetadataIdsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMintableMetadataIdsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMintableMetadataIdsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMintableMetadataIdsResponse.Merge(m, src)
}
func (m *QueryMintableMetadataIdsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryMintableMetadataIdsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMintableMetadataIdsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMintableMetadataIdsResponse proto.InternalMessageInfo

func (m *QueryMintableMetadataIdsResponse) GetInfo() MintableMetadataIds {
	if m != nil {
		return m.Info
	}
	return MintableMetadataIds{}
}

func init() {
	proto.RegisterType((*QueryCandyMachinesRequest)(nil), "bitsong.candymachine.v1beta1.QueryCandyMachinesRequest")
	proto.RegisterType((*QueryCandyMachinesResponse)(nil), "bitsong.candymachine.v1beta1.QueryCandyMachinesResponse")
	proto.RegisterType((*QueryCandyMachineRequest)(nil), "bitsong.candymachine.v1beta1.QueryCandyMachineRequest")
	proto.RegisterType((*QueryCandyMachineResponse)(nil), "bitsong.candymachine.v1beta1.QueryCandyMachineResponse")
	proto.RegisterType((*QueryParamsRequest)(nil), "bitsong.candymachine.v1beta1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "bitsong.candymachine.v1beta1.QueryParamsResponse")
	proto.RegisterType((*QueryMintableMetadataIdsRequest)(nil), "bitsong.candymachine.v1beta1.QueryMintableMetadataIdsRequest")
	proto.RegisterType((*QueryMintableMetadataIdsResponse)(nil), "bitsong.candymachine.v1beta1.QueryMintableMetadataIdsResponse")
}

func init() { proto.RegisterFile("bitsong/candymachine/query.proto", fileDescriptor_d71ca7aa0e1f6c00) }

var fileDescriptor_d71ca7aa0e1f6c00 = []byte{
	// 565 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x94, 0x41, 0x6f, 0x12, 0x41,
	0x14, 0xc7, 0x59, 0xa5, 0xd4, 0x8c, 0x7a, 0x99, 0x36, 0x11, 0x57, 0xb2, 0x25, 0x6b, 0x8d, 0x4d,
	0xd5, 0x1d, 0x69, 0x55, 0x4c, 0x93, 0x7a, 0xc0, 0x53, 0x55, 0x12, 0x25, 0x5e, 0xf4, 0x42, 0x66,
	0x77, 0x87, 0xed, 0x18, 0x76, 0x66, 0xcb, 0x0c, 0x46, 0x62, 0xbc, 0xf8, 0x09, 0x4c, 0xfa, 0x41,
	0x3c, 0xf9, 0x1d, 0x7a, 0x6c, 0xd2, 0x8b, 0x17, 0x8d, 0x01, 0x3f, 0x88, 0x61, 0xf6, 0x81, 0x90,
	0x6e, 0xa1, 0xf4, 0xb6, 0xcc, 0xbc, 0xff, 0xff, 0xff, 0x7b, 0x2f, 0x6f, 0x40, 0x65, 0x9f, 0x6b,
	0x25, 0x45, 0x44, 0x02, 0x2a, 0xc2, 0x5e, 0x4c, 0x83, 0x7d, 0x2e, 0x18, 0x39, 0xe8, 0xb2, 0x4e,
	0xcf, 0x4b, 0x3a, 0x52, 0x4b, 0x5c, 0x82, 0x0a, 0x6f, 0xb2, 0xc2, 0xfb, 0x58, 0xf1, 0x99, 0xa6,
	0x15, 0xdb, 0x09, 0xa4, 0x8a, 0xa5, 0x22, 0x3e, 0x55, 0x8c, 0xc0, 0x21, 0x09, 0x24, 0x17, 0xa9,
	0xda, 0xde, 0x9c, 0xbc, 0x37, 0xb6, 0xe3, 0xaa, 0x84, 0x46, 0x5c, 0x50, 0xcd, 0xe5, 0xa8, 0x76,
	0x35, 0x92, 0x91, 0x34, 0x9f, 0x64, 0xf8, 0x05, 0xa7, 0xa5, 0x48, 0xca, 0xa8, 0xcd, 0x08, 0x4d,
	0x38, 0xa1, 0x42, 0x48, 0x6d, 0x24, 0x0a, 0x6e, 0xef, 0x66, 0xf2, 0x4f, 0xa1, 0x9a, 0x42, 0xf7,
	0x16, 0xba, 0xf9, 0x66, 0x18, 0xff, 0x7c, 0x78, 0x55, 0x4f, 0xaf, 0x54, 0x83, 0x1d, 0x74, 0x99,
	0xd2, 0xee, 0x07, 0x64, 0x67, 0x5d, 0xaa, 0x44, 0x0a, 0xc5, 0xf0, 0x2b, 0x74, 0x05, 0xbc, 0x54,
	0xd1, 0x2a, 0x5f, 0xde, 0xb8, 0xba, 0xb5, 0xe9, 0xcd, 0x1a, 0x8a, 0x37, 0x69, 0x53, 0xcb, 0x1f,
	0xfd, 0x5e, 0xcb, 0x35, 0xc6, 0x0e, 0xee, 0x36, 0x2a, 0x9e, 0xca, 0x02, 0x0e, 0x7c, 0x03, 0x2d,
	0x07, 0xb2, 0xdd, 0x6e, 0xf2, 0xb0, 0x68, 0x95, 0xad, 0x8d, 0x7c, 0xa3, 0x30, 0xfc, 0xb9, 0x17,
	0xba, 0x51, 0x06, 0xfd, 0x98, 0xef, 0x05, 0x5a, 0x06, 0x77, 0xa3, 0xba, 0x08, 0xde, 0xc8, 0xc0,
	0x5d, 0x45, 0xd8, 0x04, 0xbd, 0xa6, 0x1d, 0x1a, 0x8f, 0xe7, 0xf3, 0x0e, 0xad, 0x4c, 0x9d, 0x42,
	0x70, 0x0d, 0x15, 0x12, 0x73, 0x02, 0xb9, 0xeb, 0xb3, 0x73, 0x53, 0x35, 0x24, 0x82, 0xd2, 0xdd,
	0x41, 0x6b, 0xc6, 0xba, 0xce, 0x85, 0xa6, 0x7e, 0x9b, 0xd5, 0x99, 0xa6, 0x21, 0xd5, 0x74, 0x2f,
	0x54, 0x73, 0xa7, 0x22, 0x51, 0xf9, 0x6c, 0x2d, 0x30, 0xbe, 0x44, 0x79, 0x2e, 0x5a, 0x12, 0x08,
	0x2b, 0xb3, 0x09, 0x33, 0x8c, 0x00, 0xd7, 0x98, 0x6c, 0xfd, 0x5a, 0x42, 0x4b, 0x26, 0x11, 0x1f,
	0x5a, 0xa8, 0x90, 0xf6, 0x83, 0x1f, 0xce, 0xf6, 0x3c, 0x3d, 0x4e, 0xbb, 0xb2, 0x80, 0x22, 0x6d,
	0xc3, 0x5d, 0xff, 0x7a, 0xf2, 0xf7, 0xf0, 0x92, 0x83, 0x4b, 0x24, 0x73, 0xe1, 0xd3, 0x61, 0xe2,
	0xef, 0x16, 0xba, 0x3e, 0xb5, 0xc3, 0xb8, 0x7a, 0x8e, 0xa8, 0xac, 0x27, 0x61, 0x3f, 0x5d, 0x5c,
	0x08, 0xa8, 0xf7, 0x0c, 0xea, 0x1d, 0x7c, 0x9b, 0xcc, 0x7d, 0x9b, 0x0a, 0xff, 0xb0, 0xd0, 0xb5,
	0x49, 0x1b, 0xfc, 0x64, 0xc1, 0xdc, 0x11, 0x6f, 0x75, 0x61, 0x1d, 0xe0, 0x3e, 0x32, 0xb8, 0x1e,
	0xbe, 0x3f, 0x1f, 0x97, 0x7c, 0x86, 0x3d, 0xfc, 0x82, 0x4f, 0x2c, 0xb4, 0x92, 0xb1, 0x2d, 0x78,
	0xf7, 0x1c, 0x18, 0x67, 0xaf, 0xba, 0xfd, 0xec, 0xa2, 0x72, 0x68, 0x66, 0xd7, 0x34, 0x53, 0xc5,
	0x8f, 0xb3, 0x9b, 0x89, 0x41, 0xda, 0x8c, 0x41, 0xdb, 0xe4, 0xa1, 0xfa, 0xdf, 0x55, 0xed, 0xed,
	0x51, 0xdf, 0xb1, 0x8e, 0xfb, 0x8e, 0xf5, 0xa7, 0xef, 0x58, 0xdf, 0x06, 0x4e, 0xee, 0x78, 0xe0,
	0xe4, 0x7e, 0x0e, 0x9c, 0xdc, 0xfb, 0x9d, 0x88, 0xeb, 0xfd, 0xae, 0xef, 0x05, 0x32, 0x1e, 0x59,
	0xcb, 0x56, 0x8b, 0x07, 0x9c, 0xb6, 0x49, 0x24, 0x1f, 0x8c, 0xd2, 0x3e, 0x4d, 0xe7, 0xe9, 0x5e,
	0xc2, 0x94, 0x5f, 0x30, 0xff, 0xc0, 0xdb, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0x04, 0x60, 0x3e,
	0xaa, 0x6c, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	CandyMachines(ctx context.Context, in *QueryCandyMachinesRequest, opts ...grpc.CallOption) (*QueryCandyMachinesResponse, error)
	CandyMachine(ctx context.Context, in *QueryCandyMachineRequest, opts ...grpc.CallOption) (*QueryCandyMachineResponse, error)
	MintableMetadataIds(ctx context.Context, in *QueryMintableMetadataIdsRequest, opts ...grpc.CallOption) (*QueryMintableMetadataIdsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/bitsong.candymachine.v1beta1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CandyMachines(ctx context.Context, in *QueryCandyMachinesRequest, opts ...grpc.CallOption) (*QueryCandyMachinesResponse, error) {
	out := new(QueryCandyMachinesResponse)
	err := c.cc.Invoke(ctx, "/bitsong.candymachine.v1beta1.Query/CandyMachines", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CandyMachine(ctx context.Context, in *QueryCandyMachineRequest, opts ...grpc.CallOption) (*QueryCandyMachineResponse, error) {
	out := new(QueryCandyMachineResponse)
	err := c.cc.Invoke(ctx, "/bitsong.candymachine.v1beta1.Query/CandyMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MintableMetadataIds(ctx context.Context, in *QueryMintableMetadataIdsRequest, opts ...grpc.CallOption) (*QueryMintableMetadataIdsResponse, error) {
	out := new(QueryMintableMetadataIdsResponse)
	err := c.cc.Invoke(ctx, "/bitsong.candymachine.v1beta1.Query/MintableMetadataIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	CandyMachines(context.Context, *QueryCandyMachinesRequest) (*QueryCandyMachinesResponse, error)
	CandyMachine(context.Context, *QueryCandyMachineRequest) (*QueryCandyMachineResponse, error)
	MintableMetadataIds(context.Context, *QueryMintableMetadataIdsRequest) (*QueryMintableMetadataIdsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) CandyMachines(ctx context.Context, req *QueryCandyMachinesRequest) (*QueryCandyMachinesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CandyMachines not implemented")
}
func (*UnimplementedQueryServer) CandyMachine(ctx context.Context, req *QueryCandyMachineRequest) (*QueryCandyMachineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CandyMachine not implemented")
}
func (*UnimplementedQueryServer) MintableMetadataIds(ctx context.Context, req *QueryMintableMetadataIdsRequest) (*QueryMintableMetadataIdsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MintableMetadataIds not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitsong.candymachine.v1beta1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CandyMachines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCandyMachinesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CandyMachines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitsong.candymachine.v1beta1.Query/CandyMachines",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CandyMachines(ctx, req.(*QueryCandyMachinesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CandyMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCandyMachineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CandyMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitsong.candymachine.v1beta1.Query/CandyMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CandyMachine(ctx, req.(*QueryCandyMachineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MintableMetadataIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMintableMetadataIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MintableMetadataIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitsong.candymachine.v1beta1.Query/MintableMetadataIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MintableMetadataIds(ctx, req.(*QueryMintableMetadataIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bitsong.candymachine.v1beta1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "CandyMachines",
			Handler:    _Query_CandyMachines_Handler,
		},
		{
			MethodName: "CandyMachine",
			Handler:    _Query_CandyMachine_Handler,
		},
		{
			MethodName: "MintableMetadataIds",
			Handler:    _Query_MintableMetadataIds_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bitsong/candymachine/query.proto",
}

func (m *QueryCandyMachinesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCandyMachinesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCandyMachinesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryCandyMachinesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCandyMachinesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCandyMachinesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Machines) > 0 {
		for iNdEx := len(m.Machines) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Machines[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryCandyMachineRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCandyMachineRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCandyMachineRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CollId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.CollId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryCandyMachineResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCandyMachineResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCandyMachineResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Machine.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryMintableMetadataIdsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMintableMetadataIdsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMintableMetadataIdsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CollId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.CollId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryMintableMetadataIdsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMintableMetadataIdsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMintableMetadataIdsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Info.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryCandyMachinesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryCandyMachinesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Machines) > 0 {
		for _, e := range m.Machines {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryCandyMachineRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CollId != 0 {
		n += 1 + sovQuery(uint64(m.CollId))
	}
	return n
}

func (m *QueryCandyMachineResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Machine.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryMintableMetadataIdsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CollId != 0 {
		n += 1 + sovQuery(uint64(m.CollId))
	}
	return n
}

func (m *QueryMintableMetadataIdsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Info.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryCandyMachinesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCandyMachinesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCandyMachinesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCandyMachinesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCandyMachinesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCandyMachinesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Machines", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Machines = append(m.Machines, CandyMachine{})
			if err := m.Machines[len(m.Machines)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCandyMachineRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCandyMachineRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCandyMachineRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollId", wireType)
			}
			m.CollId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CollId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCandyMachineResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCandyMachineResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCandyMachineResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Machine", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Machine.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMintableMetadataIdsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMintableMetadataIdsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMintableMetadataIdsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollId", wireType)
			}
			m.CollId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CollId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMintableMetadataIdsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMintableMetadataIdsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMintableMetadataIdsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
