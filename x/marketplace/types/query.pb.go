// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: bitsong/marketplace/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryAuctionsRequest struct {
	State AuctionState `protobuf:"varint,1,opt,name=state,proto3,enum=bitsong.marketplace.v1beta1.AuctionState" json:"state,omitempty"`
}

func (m *QueryAuctionsRequest) Reset()         { *m = QueryAuctionsRequest{} }
func (m *QueryAuctionsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAuctionsRequest) ProtoMessage()    {}
func (*QueryAuctionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_01af45181444af26, []int{0}
}
func (m *QueryAuctionsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAuctionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAuctionsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAuctionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAuctionsRequest.Merge(m, src)
}
func (m *QueryAuctionsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAuctionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAuctionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAuctionsRequest proto.InternalMessageInfo

func (m *QueryAuctionsRequest) GetState() AuctionState {
	if m != nil {
		return m.State
	}
	return AuctionState_Empty
}

type QueryAuctionsResponse struct {
	Auctions []Auction `protobuf:"bytes,1,rep,name=auctions,proto3" json:"auctions"`
}

func (m *QueryAuctionsResponse) Reset()         { *m = QueryAuctionsResponse{} }
func (m *QueryAuctionsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAuctionsResponse) ProtoMessage()    {}
func (*QueryAuctionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_01af45181444af26, []int{1}
}
func (m *QueryAuctionsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAuctionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAuctionsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAuctionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAuctionsResponse.Merge(m, src)
}
func (m *QueryAuctionsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAuctionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAuctionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAuctionsResponse proto.InternalMessageInfo

func (m *QueryAuctionsResponse) GetAuctions() []Auction {
	if m != nil {
		return m.Auctions
	}
	return nil
}

type QueryAuctionRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryAuctionRequest) Reset()         { *m = QueryAuctionRequest{} }
func (m *QueryAuctionRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAuctionRequest) ProtoMessage()    {}
func (*QueryAuctionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_01af45181444af26, []int{2}
}
func (m *QueryAuctionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAuctionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAuctionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAuctionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAuctionRequest.Merge(m, src)
}
func (m *QueryAuctionRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAuctionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAuctionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAuctionRequest proto.InternalMessageInfo

func (m *QueryAuctionRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryAuctionResponse struct {
	Auction Auction `protobuf:"bytes,1,opt,name=auction,proto3" json:"auction"`
}

func (m *QueryAuctionResponse) Reset()         { *m = QueryAuctionResponse{} }
func (m *QueryAuctionResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAuctionResponse) ProtoMessage()    {}
func (*QueryAuctionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_01af45181444af26, []int{3}
}
func (m *QueryAuctionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAuctionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAuctionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAuctionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAuctionResponse.Merge(m, src)
}
func (m *QueryAuctionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAuctionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAuctionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAuctionResponse proto.InternalMessageInfo

func (m *QueryAuctionResponse) GetAuction() Auction {
	if m != nil {
		return m.Auction
	}
	return Auction{}
}

type QueryBidsByAuctionRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryBidsByAuctionRequest) Reset()         { *m = QueryBidsByAuctionRequest{} }
func (m *QueryBidsByAuctionRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBidsByAuctionRequest) ProtoMessage()    {}
func (*QueryBidsByAuctionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_01af45181444af26, []int{4}
}
func (m *QueryBidsByAuctionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBidsByAuctionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBidsByAuctionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBidsByAuctionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBidsByAuctionRequest.Merge(m, src)
}
func (m *QueryBidsByAuctionRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBidsByAuctionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBidsByAuctionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBidsByAuctionRequest proto.InternalMessageInfo

func (m *QueryBidsByAuctionRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryBidsByAuctionResponse struct {
	Bids []Bid `protobuf:"bytes,1,rep,name=bids,proto3" json:"bids"`
}

func (m *QueryBidsByAuctionResponse) Reset()         { *m = QueryBidsByAuctionResponse{} }
func (m *QueryBidsByAuctionResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBidsByAuctionResponse) ProtoMessage()    {}
func (*QueryBidsByAuctionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_01af45181444af26, []int{5}
}
func (m *QueryBidsByAuctionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBidsByAuctionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBidsByAuctionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBidsByAuctionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBidsByAuctionResponse.Merge(m, src)
}
func (m *QueryBidsByAuctionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBidsByAuctionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBidsByAuctionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBidsByAuctionResponse proto.InternalMessageInfo

func (m *QueryBidsByAuctionResponse) GetBids() []Bid {
	if m != nil {
		return m.Bids
	}
	return nil
}

type QueryBidsByBidderRequest struct {
	Bidder string `protobuf:"bytes,1,opt,name=bidder,proto3" json:"bidder,omitempty"`
}

func (m *QueryBidsByBidderRequest) Reset()         { *m = QueryBidsByBidderRequest{} }
func (m *QueryBidsByBidderRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBidsByBidderRequest) ProtoMessage()    {}
func (*QueryBidsByBidderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_01af45181444af26, []int{6}
}
func (m *QueryBidsByBidderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBidsByBidderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBidsByBidderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBidsByBidderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBidsByBidderRequest.Merge(m, src)
}
func (m *QueryBidsByBidderRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBidsByBidderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBidsByBidderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBidsByBidderRequest proto.InternalMessageInfo

func (m *QueryBidsByBidderRequest) GetBidder() string {
	if m != nil {
		return m.Bidder
	}
	return ""
}

type QueryBidsByBidderResponse struct {
	Bids []Bid `protobuf:"bytes,1,rep,name=bids,proto3" json:"bids"`
}

func (m *QueryBidsByBidderResponse) Reset()         { *m = QueryBidsByBidderResponse{} }
func (m *QueryBidsByBidderResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBidsByBidderResponse) ProtoMessage()    {}
func (*QueryBidsByBidderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_01af45181444af26, []int{7}
}
func (m *QueryBidsByBidderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBidsByBidderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBidsByBidderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBidsByBidderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBidsByBidderResponse.Merge(m, src)
}
func (m *QueryBidsByBidderResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBidsByBidderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBidsByBidderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBidsByBidderResponse proto.InternalMessageInfo

func (m *QueryBidsByBidderResponse) GetBids() []Bid {
	if m != nil {
		return m.Bids
	}
	return nil
}

type QueryBidderMetadataRequest struct {
	Bidder string `protobuf:"bytes,1,opt,name=bidder,proto3" json:"bidder,omitempty"`
}

func (m *QueryBidderMetadataRequest) Reset()         { *m = QueryBidderMetadataRequest{} }
func (m *QueryBidderMetadataRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBidderMetadataRequest) ProtoMessage()    {}
func (*QueryBidderMetadataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_01af45181444af26, []int{8}
}
func (m *QueryBidderMetadataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBidderMetadataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBidderMetadataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBidderMetadataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBidderMetadataRequest.Merge(m, src)
}
func (m *QueryBidderMetadataRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBidderMetadataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBidderMetadataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBidderMetadataRequest proto.InternalMessageInfo

func (m *QueryBidderMetadataRequest) GetBidder() string {
	if m != nil {
		return m.Bidder
	}
	return ""
}

type QueryBidderMetadataResponse struct {
	BidderMetadata BidderMetadata `protobuf:"bytes,1,opt,name=bidder_metadata,json=bidderMetadata,proto3" json:"bidder_metadata"`
}

func (m *QueryBidderMetadataResponse) Reset()         { *m = QueryBidderMetadataResponse{} }
func (m *QueryBidderMetadataResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBidderMetadataResponse) ProtoMessage()    {}
func (*QueryBidderMetadataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_01af45181444af26, []int{9}
}
func (m *QueryBidderMetadataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBidderMetadataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBidderMetadataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBidderMetadataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBidderMetadataResponse.Merge(m, src)
}
func (m *QueryBidderMetadataResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBidderMetadataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBidderMetadataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBidderMetadataResponse proto.InternalMessageInfo

func (m *QueryBidderMetadataResponse) GetBidderMetadata() BidderMetadata {
	if m != nil {
		return m.BidderMetadata
	}
	return BidderMetadata{}
}

func init() {
	proto.RegisterType((*QueryAuctionsRequest)(nil), "bitsong.marketplace.v1beta1.QueryAuctionsRequest")
	proto.RegisterType((*QueryAuctionsResponse)(nil), "bitsong.marketplace.v1beta1.QueryAuctionsResponse")
	proto.RegisterType((*QueryAuctionRequest)(nil), "bitsong.marketplace.v1beta1.QueryAuctionRequest")
	proto.RegisterType((*QueryAuctionResponse)(nil), "bitsong.marketplace.v1beta1.QueryAuctionResponse")
	proto.RegisterType((*QueryBidsByAuctionRequest)(nil), "bitsong.marketplace.v1beta1.QueryBidsByAuctionRequest")
	proto.RegisterType((*QueryBidsByAuctionResponse)(nil), "bitsong.marketplace.v1beta1.QueryBidsByAuctionResponse")
	proto.RegisterType((*QueryBidsByBidderRequest)(nil), "bitsong.marketplace.v1beta1.QueryBidsByBidderRequest")
	proto.RegisterType((*QueryBidsByBidderResponse)(nil), "bitsong.marketplace.v1beta1.QueryBidsByBidderResponse")
	proto.RegisterType((*QueryBidderMetadataRequest)(nil), "bitsong.marketplace.v1beta1.QueryBidderMetadataRequest")
	proto.RegisterType((*QueryBidderMetadataResponse)(nil), "bitsong.marketplace.v1beta1.QueryBidderMetadataResponse")
}

func init() { proto.RegisterFile("bitsong/marketplace/query.proto", fileDescriptor_01af45181444af26) }

var fileDescriptor_01af45181444af26 = []byte{
	// 639 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x95, 0xcd, 0x6e, 0xd3, 0x4e,
	0x14, 0xc5, 0xe3, 0xfe, 0xfb, 0xf5, 0x1f, 0x20, 0x48, 0x43, 0x41, 0xc5, 0x45, 0x6e, 0x6b, 0xa8,
	0x68, 0x29, 0xf5, 0x90, 0xd0, 0x96, 0x8f, 0x0d, 0xc2, 0x42, 0xec, 0x58, 0x90, 0x2e, 0x8a, 0x2a,
	0xa4, 0x68, 0x6c, 0x4f, 0xcd, 0x88, 0xc4, 0xe3, 0x66, 0x26, 0x88, 0x28, 0xca, 0x86, 0x27, 0x40,
	0x62, 0xc5, 0x8e, 0x77, 0x60, 0xc7, 0x13, 0x74, 0x59, 0x89, 0x0d, 0x2b, 0x84, 0x12, 0xf6, 0xbc,
	0x02, 0xca, 0x78, 0x9c, 0xda, 0xc5, 0x38, 0xb1, 0xc4, 0x2a, 0xce, 0x9d, 0x7b, 0xce, 0xfd, 0x8d,
	0x73, 0x8f, 0x02, 0x96, 0x1d, 0x2a, 0x38, 0x0b, 0x7c, 0xd4, 0xc4, 0xad, 0xd7, 0x44, 0x84, 0x0d,
	0xec, 0x12, 0x74, 0xd4, 0x26, 0xad, 0x8e, 0x15, 0xb6, 0x98, 0x60, 0x70, 0x49, 0x35, 0x58, 0x89,
	0x06, 0xeb, 0x4d, 0xc5, 0x21, 0x02, 0x57, 0x74, 0xc3, 0x65, 0xbc, 0xc9, 0x38, 0x72, 0x30, 0x27,
	0x48, 0x15, 0x91, 0xcb, 0x68, 0x10, 0x89, 0xf5, 0x5b, 0xc9, 0x73, 0xe9, 0x3a, 0xea, 0x0a, 0xb1,
	0x4f, 0x03, 0x2c, 0x28, 0x8b, 0x7b, 0x17, 0x7c, 0xe6, 0x33, 0xf9, 0x88, 0x86, 0x4f, 0xaa, 0x7a,
	0xcd, 0x67, 0xcc, 0x6f, 0x10, 0x84, 0x43, 0x8a, 0x70, 0x10, 0x30, 0x21, 0x25, 0x5c, 0x9d, 0xae,
	0x66, 0xd1, 0xe3, 0xb6, 0x7b, 0x6a, 0x6b, 0xee, 0x83, 0x85, 0xe7, 0xc3, 0xc1, 0x8f, 0xa3, 0x2a,
	0xaf, 0x91, 0xa3, 0x36, 0xe1, 0x02, 0x3e, 0x02, 0x33, 0x5c, 0x60, 0x41, 0x16, 0xb5, 0x15, 0x6d,
	0xbd, 0x5c, 0xdd, 0xb0, 0x72, 0xee, 0x69, 0x29, 0xf1, 0xde, 0x50, 0x50, 0x8b, 0x74, 0x66, 0x1d,
	0x5c, 0x3e, 0x63, 0xcc, 0x43, 0x16, 0x70, 0x02, 0x9f, 0x82, 0x79, 0x85, 0xc0, 0x17, 0xb5, 0x95,
	0xff, 0xd6, 0xcf, 0x55, 0x6f, 0x4c, 0x62, 0x6e, 0x4f, 0x1f, 0x7f, 0x5f, 0x2e, 0xd5, 0x46, 0x5a,
	0x73, 0x0d, 0x5c, 0x4a, 0x0e, 0x88, 0xc1, 0xcb, 0x60, 0x8a, 0x7a, 0x92, 0x7a, 0xba, 0x36, 0x45,
	0x3d, 0xf3, 0x65, 0xfa, 0x82, 0x23, 0x8c, 0x27, 0x60, 0x4e, 0x59, 0xc9, 0xe6, 0x62, 0x14, 0xb1,
	0xd4, 0xdc, 0x04, 0x57, 0xa5, 0xbb, 0x4d, 0x3d, 0x6e, 0x8f, 0x43, 0x79, 0x01, 0xf4, 0xac, 0x66,
	0x05, 0xf4, 0x10, 0x4c, 0x3b, 0xd4, 0x8b, 0xdf, 0xc9, 0x4a, 0x2e, 0x8d, 0x4d, 0x3d, 0x45, 0x22,
	0x35, 0x66, 0x15, 0x2c, 0x26, 0x9c, 0x6d, 0xea, 0x79, 0xa4, 0x15, 0x53, 0x5c, 0x01, 0xb3, 0x8e,
	0x2c, 0x48, 0x92, 0xff, 0x6b, 0xea, 0x9b, 0xb9, 0x9f, 0x42, 0x8f, 0x35, 0xff, 0x00, 0x66, 0xfb,
	0xf4, 0x9a, 0x1e, 0x69, 0x3d, 0x23, 0x02, 0x7b, 0x58, 0xe0, 0x71, 0x38, 0x1d, 0xb0, 0x94, 0xa9,
	0x52, 0x40, 0x07, 0xe0, 0x62, 0xd4, 0x58, 0x6f, 0xaa, 0x23, 0xf5, 0xb3, 0x6d, 0x8e, 0x63, 0x4b,
	0xb8, 0x29, 0xcc, 0xb2, 0x93, 0xaa, 0x56, 0x7f, 0xcd, 0x82, 0x19, 0x39, 0x1b, 0x7e, 0xd2, 0xc0,
	0x7c, 0xbc, 0xb0, 0xb0, 0x92, 0xeb, 0x9c, 0x95, 0x1a, 0xbd, 0x5a, 0x44, 0x12, 0xdd, 0xcc, 0xdc,
	0x7a, 0xf7, 0xf5, 0xe7, 0x87, 0xa9, 0x9b, 0x70, 0x0d, 0xe5, 0xa4, 0x95, 0xa3, 0xae, 0x8c, 0x55,
	0x0f, 0x7e, 0xd4, 0xc0, 0x9c, 0xf2, 0x80, 0x77, 0x26, 0x1e, 0x17, 0x03, 0x56, 0x0a, 0x28, 0x14,
	0xdf, 0x86, 0xe4, 0xbb, 0x0e, 0x57, 0xf3, 0xf8, 0x50, 0x97, 0x7a, 0x3d, 0xf8, 0x59, 0x03, 0x17,
	0x52, 0xcb, 0x0d, 0x77, 0xc7, 0xcf, 0xcb, 0x8a, 0x8e, 0x7e, 0xaf, 0xb0, 0x4e, 0xd1, 0x56, 0x24,
	0xed, 0x26, 0xdc, 0xc8, 0xa4, 0x1d, 0xee, 0x67, 0xdd, 0xe9, 0xd4, 0xcf, 0x52, 0x9f, 0x4f, 0x86,
	0x00, 0xee, 0x4c, 0x3a, 0x3c, 0x15, 0x34, 0x7d, 0xb7, 0xa8, 0x4c, 0x21, 0x6f, 0x4b, 0x64, 0x0b,
	0xde, 0xce, 0x45, 0x8e, 0x76, 0x16, 0x75, 0xa3, 0xcf, 0x1e, 0xfc, 0xa2, 0x81, 0x72, 0x7a, 0xbb,
	0xe1, 0x64, 0x2f, 0xed, 0xcf, 0x4c, 0xea, 0xf7, 0x8b, 0x0b, 0x15, 0xfb, 0x8e, 0x64, 0x47, 0x70,
	0xeb, 0x6f, 0xec, 0xc9, 0xc4, 0x8e, 0xe0, 0xed, 0xbd, 0xe3, 0xbe, 0xa1, 0x9d, 0xf4, 0x0d, 0xed,
	0x47, 0xdf, 0xd0, 0xde, 0x0f, 0x8c, 0xd2, 0xc9, 0xc0, 0x28, 0x7d, 0x1b, 0x18, 0xa5, 0x83, 0x07,
	0x3e, 0x15, 0xaf, 0xda, 0x8e, 0xe5, 0xb2, 0x66, 0x6c, 0xc9, 0x0e, 0x0f, 0xa9, 0x4b, 0x71, 0x03,
	0xf9, 0x6c, 0x2b, 0x9e, 0xf2, 0x36, 0x35, 0x47, 0x74, 0x42, 0xc2, 0x9d, 0x59, 0xf9, 0x8f, 0x76,
	0xf7, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb2, 0x35, 0xbc, 0x90, 0xb4, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Query auctions by auction state, Empty state is providing all the auctions
	Auctions(ctx context.Context, in *QueryAuctionsRequest, opts ...grpc.CallOption) (*QueryAuctionsResponse, error)
	Auction(ctx context.Context, in *QueryAuctionRequest, opts ...grpc.CallOption) (*QueryAuctionResponse, error)
	BidsByAuction(ctx context.Context, in *QueryBidsByAuctionRequest, opts ...grpc.CallOption) (*QueryBidsByAuctionResponse, error)
	BidsByBidder(ctx context.Context, in *QueryBidsByBidderRequest, opts ...grpc.CallOption) (*QueryBidsByBidderResponse, error)
	BidderMetadata(ctx context.Context, in *QueryBidderMetadataRequest, opts ...grpc.CallOption) (*QueryBidderMetadataResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Auctions(ctx context.Context, in *QueryAuctionsRequest, opts ...grpc.CallOption) (*QueryAuctionsResponse, error) {
	out := new(QueryAuctionsResponse)
	err := c.cc.Invoke(ctx, "/bitsong.marketplace.v1beta1.Query/Auctions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Auction(ctx context.Context, in *QueryAuctionRequest, opts ...grpc.CallOption) (*QueryAuctionResponse, error) {
	out := new(QueryAuctionResponse)
	err := c.cc.Invoke(ctx, "/bitsong.marketplace.v1beta1.Query/Auction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BidsByAuction(ctx context.Context, in *QueryBidsByAuctionRequest, opts ...grpc.CallOption) (*QueryBidsByAuctionResponse, error) {
	out := new(QueryBidsByAuctionResponse)
	err := c.cc.Invoke(ctx, "/bitsong.marketplace.v1beta1.Query/BidsByAuction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BidsByBidder(ctx context.Context, in *QueryBidsByBidderRequest, opts ...grpc.CallOption) (*QueryBidsByBidderResponse, error) {
	out := new(QueryBidsByBidderResponse)
	err := c.cc.Invoke(ctx, "/bitsong.marketplace.v1beta1.Query/BidsByBidder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BidderMetadata(ctx context.Context, in *QueryBidderMetadataRequest, opts ...grpc.CallOption) (*QueryBidderMetadataResponse, error) {
	out := new(QueryBidderMetadataResponse)
	err := c.cc.Invoke(ctx, "/bitsong.marketplace.v1beta1.Query/BidderMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Query auctions by auction state, Empty state is providing all the auctions
	Auctions(context.Context, *QueryAuctionsRequest) (*QueryAuctionsResponse, error)
	Auction(context.Context, *QueryAuctionRequest) (*QueryAuctionResponse, error)
	BidsByAuction(context.Context, *QueryBidsByAuctionRequest) (*QueryBidsByAuctionResponse, error)
	BidsByBidder(context.Context, *QueryBidsByBidderRequest) (*QueryBidsByBidderResponse, error)
	BidderMetadata(context.Context, *QueryBidderMetadataRequest) (*QueryBidderMetadataResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Auctions(ctx context.Context, req *QueryAuctionsRequest) (*QueryAuctionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Auctions not implemented")
}
func (*UnimplementedQueryServer) Auction(ctx context.Context, req *QueryAuctionRequest) (*QueryAuctionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Auction not implemented")
}
func (*UnimplementedQueryServer) BidsByAuction(ctx context.Context, req *QueryBidsByAuctionRequest) (*QueryBidsByAuctionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BidsByAuction not implemented")
}
func (*UnimplementedQueryServer) BidsByBidder(ctx context.Context, req *QueryBidsByBidderRequest) (*QueryBidsByBidderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BidsByBidder not implemented")
}
func (*UnimplementedQueryServer) BidderMetadata(ctx context.Context, req *QueryBidderMetadataRequest) (*QueryBidderMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BidderMetadata not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Auctions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAuctionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Auctions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitsong.marketplace.v1beta1.Query/Auctions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Auctions(ctx, req.(*QueryAuctionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Auction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAuctionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Auction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitsong.marketplace.v1beta1.Query/Auction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Auction(ctx, req.(*QueryAuctionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BidsByAuction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBidsByAuctionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BidsByAuction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitsong.marketplace.v1beta1.Query/BidsByAuction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BidsByAuction(ctx, req.(*QueryBidsByAuctionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BidsByBidder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBidsByBidderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BidsByBidder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitsong.marketplace.v1beta1.Query/BidsByBidder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BidsByBidder(ctx, req.(*QueryBidsByBidderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BidderMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBidderMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BidderMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitsong.marketplace.v1beta1.Query/BidderMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BidderMetadata(ctx, req.(*QueryBidderMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bitsong.marketplace.v1beta1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Auctions",
			Handler:    _Query_Auctions_Handler,
		},
		{
			MethodName: "Auction",
			Handler:    _Query_Auction_Handler,
		},
		{
			MethodName: "BidsByAuction",
			Handler:    _Query_BidsByAuction_Handler,
		},
		{
			MethodName: "BidsByBidder",
			Handler:    _Query_BidsByBidder_Handler,
		},
		{
			MethodName: "BidderMetadata",
			Handler:    _Query_BidderMetadata_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bitsong/marketplace/query.proto",
}

func (m *QueryAuctionsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAuctionsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAuctionsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.State != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryAuctionsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAuctionsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAuctionsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Auctions) > 0 {
		for iNdEx := len(m.Auctions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Auctions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAuctionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAuctionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAuctionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryAuctionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAuctionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAuctionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Auction.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryBidsByAuctionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBidsByAuctionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBidsByAuctionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryBidsByAuctionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBidsByAuctionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBidsByAuctionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Bids) > 0 {
		for iNdEx := len(m.Bids) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Bids[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryBidsByBidderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBidsByBidderRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBidsByBidderRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Bidder) > 0 {
		i -= len(m.Bidder)
		copy(dAtA[i:], m.Bidder)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Bidder)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBidsByBidderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBidsByBidderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBidsByBidderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Bids) > 0 {
		for iNdEx := len(m.Bids) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Bids[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryBidderMetadataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBidderMetadataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBidderMetadataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Bidder) > 0 {
		i -= len(m.Bidder)
		copy(dAtA[i:], m.Bidder)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Bidder)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBidderMetadataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBidderMetadataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBidderMetadataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.BidderMetadata.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryAuctionsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != 0 {
		n += 1 + sovQuery(uint64(m.State))
	}
	return n
}

func (m *QueryAuctionsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Auctions) > 0 {
		for _, e := range m.Auctions {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryAuctionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryAuctionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Auction.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryBidsByAuctionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryBidsByAuctionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Bids) > 0 {
		for _, e := range m.Bids {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryBidsByBidderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Bidder)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBidsByBidderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Bids) > 0 {
		for _, e := range m.Bids {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryBidderMetadataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Bidder)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBidderMetadataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.BidderMetadata.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryAuctionsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAuctionsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAuctionsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= AuctionState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAuctionsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAuctionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAuctionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Auctions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Auctions = append(m.Auctions, Auction{})
			if err := m.Auctions[len(m.Auctions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAuctionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAuctionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAuctionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAuctionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAuctionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAuctionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Auction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Auction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBidsByAuctionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBidsByAuctionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBidsByAuctionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBidsByAuctionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBidsByAuctionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBidsByAuctionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bids", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bids = append(m.Bids, Bid{})
			if err := m.Bids[len(m.Bids)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBidsByBidderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBidsByBidderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBidsByBidderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bidder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bidder = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBidsByBidderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBidsByBidderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBidsByBidderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bids", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bids = append(m.Bids, Bid{})
			if err := m.Bids[len(m.Bids)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBidderMetadataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBidderMetadataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBidderMetadataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bidder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bidder = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBidderMetadataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBidderMetadataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBidderMetadataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BidderMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BidderMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
